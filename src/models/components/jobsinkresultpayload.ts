/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { WebhookAPIInfo, WebhookAPIInfo$ } from "./webhookapiinfo.js";
import * as z from "zod";

/**
 * The project details of the API
 */
export type Project = {
    /**
     * The project ID
     */
    id: string;
    /**
     * The project name
     */
    name: string;
};

/**
 * The auth session used in the run
 */
export type JobSinkResultPayloadAuthSession = {
    /**
     * The ID of the auth session
     */
    id: string;
};

/**
 * The job details of the run
 */
export type ProjectJob = {
    /**
     * The job ID
     */
    id: string;
};

/**
 * The job run details
 */
export type ProjectJobRun = {
    /**
     * The job run ID
     */
    id: string;
};

/**
 * Webhook payload of job run result
 */
export type JobSinkResultPayload = {
    /**
     * Webhook API info
     */
    apiInfo: WebhookAPIInfo;
    /**
     * The workspace ID of the API
     */
    workspaceId: string;
    /**
     * The project details of the API
     */
    project: Project;
    /**
     * The auth session used in the run
     */
    authSession?: JobSinkResultPayloadAuthSession | undefined;
    /**
     * The job details of the run
     */
    projectJob: ProjectJob;
    /**
     * The job run details
     */
    projectJobRun: ProjectJobRun;
};

/** @internal */
export namespace Project$ {
    export const inboundSchema: z.ZodType<Project, z.ZodTypeDef, unknown> = z.object({
        id: z.string(),
        name: z.string(),
    });

    export type Outbound = {
        id: string;
        name: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Project> = z.object({
        id: z.string(),
        name: z.string(),
    });
}

/** @internal */
export namespace JobSinkResultPayloadAuthSession$ {
    export const inboundSchema: z.ZodType<JobSinkResultPayloadAuthSession, z.ZodTypeDef, unknown> =
        z.object({
            id: z.string(),
        });

    export type Outbound = {
        id: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        JobSinkResultPayloadAuthSession
    > = z.object({
        id: z.string(),
    });
}

/** @internal */
export namespace ProjectJob$ {
    export const inboundSchema: z.ZodType<ProjectJob, z.ZodTypeDef, unknown> = z.object({
        id: z.string(),
    });

    export type Outbound = {
        id: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ProjectJob> = z.object({
        id: z.string(),
    });
}

/** @internal */
export namespace ProjectJobRun$ {
    export const inboundSchema: z.ZodType<ProjectJobRun, z.ZodTypeDef, unknown> = z.object({
        id: z.string(),
    });

    export type Outbound = {
        id: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ProjectJobRun> = z.object({
        id: z.string(),
    });
}

/** @internal */
export namespace JobSinkResultPayload$ {
    export const inboundSchema: z.ZodType<JobSinkResultPayload, z.ZodTypeDef, unknown> = z.object({
        apiInfo: WebhookAPIInfo$.inboundSchema,
        workspaceId: z.string(),
        project: z.lazy(() => Project$.inboundSchema),
        authSession: z.lazy(() => JobSinkResultPayloadAuthSession$.inboundSchema).optional(),
        projectJob: z.lazy(() => ProjectJob$.inboundSchema),
        projectJobRun: z.lazy(() => ProjectJobRun$.inboundSchema),
    });

    export type Outbound = {
        apiInfo: WebhookAPIInfo$.Outbound;
        workspaceId: string;
        project: Project$.Outbound;
        authSession?: JobSinkResultPayloadAuthSession$.Outbound | undefined;
        projectJob: ProjectJob$.Outbound;
        projectJobRun: ProjectJobRun$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, JobSinkResultPayload> = z.object(
        {
            apiInfo: WebhookAPIInfo$.outboundSchema,
            workspaceId: z.string(),
            project: z.lazy(() => Project$.outboundSchema),
            authSession: z.lazy(() => JobSinkResultPayloadAuthSession$.outboundSchema).optional(),
            projectJob: z.lazy(() => ProjectJob$.outboundSchema),
            projectJobRun: z.lazy(() => ProjectJobRun$.outboundSchema),
        }
    );
}
