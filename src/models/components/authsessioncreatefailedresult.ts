/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export enum AuthSessionCreateFailedResultStatus {
    Failed = "failed",
}

export type AuthSessionCreateFailedResult = {
    status: AuthSessionCreateFailedResultStatus;
    error: string;
    message: string;
};

/** @internal */
export namespace AuthSessionCreateFailedResultStatus$ {
    export const inboundSchema = z.nativeEnum(AuthSessionCreateFailedResultStatus);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace AuthSessionCreateFailedResult$ {
    export const inboundSchema: z.ZodType<AuthSessionCreateFailedResult, z.ZodTypeDef, unknown> = z
        .object({
            status: AuthSessionCreateFailedResultStatus$.inboundSchema,
            error: z.string(),
            message: z.string(),
        })
        .transform((v) => {
            return {
                status: v.status,
                error: v.error,
                message: v.message,
            };
        });

    export type Outbound = {
        status: string;
        error: string;
        message: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AuthSessionCreateFailedResult> =
        z
            .object({
                status: AuthSessionCreateFailedResultStatus$.outboundSchema,
                error: z.string(),
                message: z.string(),
            })
            .transform((v) => {
                return {
                    status: v.status,
                    error: v.error,
                    message: v.message,
                };
            });
}
