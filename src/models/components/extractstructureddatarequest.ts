/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { FileT, FileT$ } from "./file";
import * as z from "zod";

export type ExtractStructuredDataRequest = {
    file: FileT;
    /**
     * JsonSchema described as a JSON Schema object.
     */
    dataSchema: { [k: string]: any };
};

/** @internal */
export namespace ExtractStructuredDataRequest$ {
    export const inboundSchema: z.ZodType<ExtractStructuredDataRequest, z.ZodTypeDef, unknown> = z
        .object({
            file: FileT$.inboundSchema,
            dataSchema: z.record(z.any()),
        })
        .transform((v) => {
            return {
                file: v.file,
                dataSchema: v.dataSchema,
            };
        });

    export type Outbound = {
        file: FileT$.Outbound;
        dataSchema: { [k: string]: any };
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ExtractStructuredDataRequest> = z
        .object({
            file: FileT$.outboundSchema,
            dataSchema: z.record(z.any()),
        })
        .transform((v) => {
            return {
                file: v.file,
                dataSchema: v.dataSchema,
            };
        });
}
