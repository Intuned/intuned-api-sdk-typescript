/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { JobCalendarValue, JobCalendarValue$ } from "./jobcalendarvalue";
import * as z from "zod";

export type Every = number | string;

export type Intervals = {
    every?: number | string | undefined;
};

/**
 * The calendar value. This works similar to a cron string.
 */
export type Calendars = {
    second?: JobCalendarValue | undefined;
    minute?: JobCalendarValue | undefined;
    hour?: JobCalendarValue | undefined;
    dayOfMonth?: JobCalendarValue | undefined;
    dayOfWeek?: JobCalendarValue | undefined;
    month?: JobCalendarValue | undefined;
    year?: JobCalendarValue | undefined;
    /**
     * A comment to describe what the calendar is supposed to represent
     */
    comment?: string | undefined;
};

export type JobSchedule = {
    version?: string | undefined;
    intervals?: Array<Intervals> | undefined;
    calendars?: Array<Calendars> | undefined;
};

/** @internal */
export namespace Every$ {
    export const inboundSchema: z.ZodType<Every, z.ZodTypeDef, unknown> = z.union([
        z.number(),
        z.string(),
    ]);

    export type Outbound = number | string;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Every> = z.union([
        z.number(),
        z.string(),
    ]);
}

/** @internal */
export namespace Intervals$ {
    export const inboundSchema: z.ZodType<Intervals, z.ZodTypeDef, unknown> = z
        .object({
            every: z.union([z.number(), z.string()]).optional(),
        })
        .transform((v) => {
            return {
                ...(v.every === undefined ? null : { every: v.every }),
            };
        });

    export type Outbound = {
        every?: number | string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Intervals> = z
        .object({
            every: z.union([z.number(), z.string()]).optional(),
        })
        .transform((v) => {
            return {
                ...(v.every === undefined ? null : { every: v.every }),
            };
        });
}

/** @internal */
export namespace Calendars$ {
    export const inboundSchema: z.ZodType<Calendars, z.ZodTypeDef, unknown> = z
        .object({
            second: JobCalendarValue$.inboundSchema.optional(),
            minute: JobCalendarValue$.inboundSchema.optional(),
            hour: JobCalendarValue$.inboundSchema.optional(),
            dayOfMonth: JobCalendarValue$.inboundSchema.optional(),
            dayOfWeek: JobCalendarValue$.inboundSchema.optional(),
            month: JobCalendarValue$.inboundSchema.optional(),
            year: JobCalendarValue$.inboundSchema.optional(),
            comment: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.second === undefined ? null : { second: v.second }),
                ...(v.minute === undefined ? null : { minute: v.minute }),
                ...(v.hour === undefined ? null : { hour: v.hour }),
                ...(v.dayOfMonth === undefined ? null : { dayOfMonth: v.dayOfMonth }),
                ...(v.dayOfWeek === undefined ? null : { dayOfWeek: v.dayOfWeek }),
                ...(v.month === undefined ? null : { month: v.month }),
                ...(v.year === undefined ? null : { year: v.year }),
                ...(v.comment === undefined ? null : { comment: v.comment }),
            };
        });

    export type Outbound = {
        second?: JobCalendarValue$.Outbound | undefined;
        minute?: JobCalendarValue$.Outbound | undefined;
        hour?: JobCalendarValue$.Outbound | undefined;
        dayOfMonth?: JobCalendarValue$.Outbound | undefined;
        dayOfWeek?: JobCalendarValue$.Outbound | undefined;
        month?: JobCalendarValue$.Outbound | undefined;
        year?: JobCalendarValue$.Outbound | undefined;
        comment?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Calendars> = z
        .object({
            second: JobCalendarValue$.outboundSchema.optional(),
            minute: JobCalendarValue$.outboundSchema.optional(),
            hour: JobCalendarValue$.outboundSchema.optional(),
            dayOfMonth: JobCalendarValue$.outboundSchema.optional(),
            dayOfWeek: JobCalendarValue$.outboundSchema.optional(),
            month: JobCalendarValue$.outboundSchema.optional(),
            year: JobCalendarValue$.outboundSchema.optional(),
            comment: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.second === undefined ? null : { second: v.second }),
                ...(v.minute === undefined ? null : { minute: v.minute }),
                ...(v.hour === undefined ? null : { hour: v.hour }),
                ...(v.dayOfMonth === undefined ? null : { dayOfMonth: v.dayOfMonth }),
                ...(v.dayOfWeek === undefined ? null : { dayOfWeek: v.dayOfWeek }),
                ...(v.month === undefined ? null : { month: v.month }),
                ...(v.year === undefined ? null : { year: v.year }),
                ...(v.comment === undefined ? null : { comment: v.comment }),
            };
        });
}

/** @internal */
export namespace JobSchedule$ {
    export const inboundSchema: z.ZodType<JobSchedule, z.ZodTypeDef, unknown> = z
        .object({
            version: z.string().optional(),
            intervals: z.array(z.lazy(() => Intervals$.inboundSchema)).optional(),
            calendars: z.array(z.lazy(() => Calendars$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.version === undefined ? null : { version: v.version }),
                ...(v.intervals === undefined ? null : { intervals: v.intervals }),
                ...(v.calendars === undefined ? null : { calendars: v.calendars }),
            };
        });

    export type Outbound = {
        version?: string | undefined;
        intervals?: Array<Intervals$.Outbound> | undefined;
        calendars?: Array<Calendars$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, JobSchedule> = z
        .object({
            version: z.string().optional(),
            intervals: z.array(z.lazy(() => Intervals$.outboundSchema)).optional(),
            calendars: z.array(z.lazy(() => Calendars$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.version === undefined ? null : { version: v.version }),
                ...(v.intervals === undefined ? null : { intervals: v.intervals }),
                ...(v.calendars === undefined ? null : { calendars: v.calendars }),
            };
        });
}
