/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { JobCalendarValue, JobCalendarValue$ } from "./jobcalendarvalue";
import * as z from "zod";

export type Every = number | string;

/**
 * An interval object, which represents a period to trigger the job. The interval is relative to the [Unix epoch](https://en.wikipedia.org/wiki/Unix_time).
 */
export type Intervals = {
    every: number | string;
};

/**
 * A calendar object. It is similar to a cron string, but more verbose.
 */
export type Calendars = {
    second?: JobCalendarValue | undefined;
    minute?: JobCalendarValue | undefined;
    hour?: JobCalendarValue | undefined;
    dayOfMonth?: JobCalendarValue | undefined;
    dayOfWeek?: JobCalendarValue | undefined;
    month?: JobCalendarValue | undefined;
    year?: JobCalendarValue | undefined;
    /**
     * A comment to describe what the calendar is supposed to represent
     */
    comment?: string | undefined;
};

/**
 * Schedule configurations for the job. If set, the job will periodically run according to this configuration. The configurations are used to calculate the closest next run time.
 */
export type JobSchedule = {
    /**
     * An array of interval objects
     */
    intervals?: Array<Intervals> | undefined;
    /**
     * An array of calendar objects
     */
    calendars?: Array<Calendars> | undefined;
};

/** @internal */
export namespace Every$ {
    export const inboundSchema: z.ZodType<Every, z.ZodTypeDef, unknown> = z.union([
        z.number(),
        z.string(),
    ]);

    export type Outbound = number | string;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Every> = z.union([
        z.number(),
        z.string(),
    ]);
}

/** @internal */
export namespace Intervals$ {
    export const inboundSchema: z.ZodType<Intervals, z.ZodTypeDef, unknown> = z.object({
        every: z.union([z.number(), z.string()]),
    });

    export type Outbound = {
        every: number | string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Intervals> = z.object({
        every: z.union([z.number(), z.string()]),
    });
}

/** @internal */
export namespace Calendars$ {
    export const inboundSchema: z.ZodType<Calendars, z.ZodTypeDef, unknown> = z.object({
        second: JobCalendarValue$.inboundSchema.optional(),
        minute: JobCalendarValue$.inboundSchema.optional(),
        hour: JobCalendarValue$.inboundSchema.optional(),
        dayOfMonth: JobCalendarValue$.inboundSchema.optional(),
        dayOfWeek: JobCalendarValue$.inboundSchema.optional(),
        month: JobCalendarValue$.inboundSchema.optional(),
        year: JobCalendarValue$.inboundSchema.optional(),
        comment: z.string().optional(),
    });

    export type Outbound = {
        second?: JobCalendarValue$.Outbound | undefined;
        minute?: JobCalendarValue$.Outbound | undefined;
        hour?: JobCalendarValue$.Outbound | undefined;
        dayOfMonth?: JobCalendarValue$.Outbound | undefined;
        dayOfWeek?: JobCalendarValue$.Outbound | undefined;
        month?: JobCalendarValue$.Outbound | undefined;
        year?: JobCalendarValue$.Outbound | undefined;
        comment?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Calendars> = z.object({
        second: JobCalendarValue$.outboundSchema.optional(),
        minute: JobCalendarValue$.outboundSchema.optional(),
        hour: JobCalendarValue$.outboundSchema.optional(),
        dayOfMonth: JobCalendarValue$.outboundSchema.optional(),
        dayOfWeek: JobCalendarValue$.outboundSchema.optional(),
        month: JobCalendarValue$.outboundSchema.optional(),
        year: JobCalendarValue$.outboundSchema.optional(),
        comment: z.string().optional(),
    });
}

/** @internal */
export namespace JobSchedule$ {
    export const inboundSchema: z.ZodType<JobSchedule, z.ZodTypeDef, unknown> = z.object({
        intervals: z.array(z.lazy(() => Intervals$.inboundSchema)).optional(),
        calendars: z.array(z.lazy(() => Calendars$.inboundSchema)).optional(),
    });

    export type Outbound = {
        intervals?: Array<Intervals$.Outbound> | undefined;
        calendars?: Array<Calendars$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, JobSchedule> = z.object({
        intervals: z.array(z.lazy(() => Intervals$.outboundSchema)).optional(),
        calendars: z.array(z.lazy(() => Calendars$.outboundSchema)).optional(),
    });
}
