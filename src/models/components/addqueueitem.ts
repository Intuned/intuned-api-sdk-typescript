/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export enum AddQueueItemStatus {
    Queued = "queued",
}

export type AddQueueItem = {
    runId?: string | undefined;
    status?: AddQueueItemStatus | undefined;
};

/** @internal */
export namespace AddQueueItemStatus$ {
    export const inboundSchema = z.nativeEnum(AddQueueItemStatus);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace AddQueueItem$ {
    export const inboundSchema: z.ZodType<AddQueueItem, z.ZodTypeDef, unknown> = z
        .object({
            runId: z.string().optional(),
            status: AddQueueItemStatus$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.runId === undefined ? null : { runId: v.runId }),
                ...(v.status === undefined ? null : { status: v.status }),
            };
        });

    export type Outbound = {
        runId?: string | undefined;
        status?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AddQueueItem> = z
        .object({
            runId: z.string().optional(),
            status: AddQueueItemStatus$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.runId === undefined ? null : { runId: v.runId }),
                ...(v.status === undefined ? null : { status: v.status }),
            };
        });
}
