/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * Operation status.
 */
export enum StructuredDataExtractionAsyncSuccessfulResponseStatus {
    Completed = "completed",
}

/**
 * Successful file extraction result
 */
export type StructuredDataExtractionAsyncSuccessfulResponse = {
    /**
     * The extracted data formatted according to the input `dataSchema`
     */
    result?: any | undefined;
    /**
     * Operation ID.
     */
    operationId: string;
    /**
     * Operation status.
     */
    status: StructuredDataExtractionAsyncSuccessfulResponseStatus;
};

/** @internal */
export namespace StructuredDataExtractionAsyncSuccessfulResponseStatus$ {
    export const inboundSchema = z.nativeEnum(
        StructuredDataExtractionAsyncSuccessfulResponseStatus
    );
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace StructuredDataExtractionAsyncSuccessfulResponse$ {
    export const inboundSchema: z.ZodType<
        StructuredDataExtractionAsyncSuccessfulResponse,
        z.ZodTypeDef,
        unknown
    > = z.object({
        result: z.any().optional(),
        operationId: z.string(),
        status: StructuredDataExtractionAsyncSuccessfulResponseStatus$.inboundSchema,
    });

    export type Outbound = {
        result?: any | undefined;
        operationId: string;
        status: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        StructuredDataExtractionAsyncSuccessfulResponse
    > = z.object({
        result: z.any().optional(),
        operationId: z.string(),
        status: StructuredDataExtractionAsyncSuccessfulResponseStatus$.outboundSchema,
    });
}
