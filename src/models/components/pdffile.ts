/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { FileSource, FileSource$ } from "./filesource";
import * as z from "zod";

export enum PdfFileType {
    Pdf = "pdf",
}

export type PdfFile = {
    type: PdfFileType;
    pages?: Array<number> | undefined;
    source: FileSource;
};

/** @internal */
export namespace PdfFileType$ {
    export const inboundSchema = z.nativeEnum(PdfFileType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace PdfFile$ {
    export const inboundSchema: z.ZodType<PdfFile, z.ZodTypeDef, unknown> = z
        .object({
            type: PdfFileType$.inboundSchema,
            pages: z.array(z.number().int()).optional(),
            source: FileSource$.inboundSchema,
        })
        .transform((v) => {
            return {
                type: v.type,
                ...(v.pages === undefined ? null : { pages: v.pages }),
                source: v.source,
            };
        });

    export type Outbound = {
        type: string;
        pages?: Array<number> | undefined;
        source: FileSource$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PdfFile> = z
        .object({
            type: PdfFileType$.outboundSchema,
            pages: z.array(z.number().int()).optional(),
            source: FileSource$.outboundSchema,
        })
        .transform((v) => {
            return {
                type: v.type,
                ...(v.pages === undefined ? null : { pages: v.pages }),
                source: v.source,
            };
        });
}
