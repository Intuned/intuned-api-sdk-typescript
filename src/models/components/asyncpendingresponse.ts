/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The status of the asynchronous operation
 */
export enum AsyncPendingResponseStatus {
    Pending = "pending",
}

export type AsyncPendingResponse = {
    /**
     * The status of the asynchronous operation
     */
    status?: AsyncPendingResponseStatus | undefined;
    /**
     * The operation ID
     */
    operationId?: string | undefined;
};

/** @internal */
export namespace AsyncPendingResponseStatus$ {
    export const inboundSchema = z.nativeEnum(AsyncPendingResponseStatus);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace AsyncPendingResponse$ {
    export const inboundSchema: z.ZodType<AsyncPendingResponse, z.ZodTypeDef, unknown> = z
        .object({
            status: AsyncPendingResponseStatus$.inboundSchema.optional(),
            operationId: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.operationId === undefined ? null : { operationId: v.operationId }),
            };
        });

    export type Outbound = {
        status?: string | undefined;
        operationId?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AsyncPendingResponse> = z
        .object({
            status: AsyncPendingResponseStatus$.outboundSchema.optional(),
            operationId: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.operationId === undefined ? null : { operationId: v.operationId }),
            };
        });
}
