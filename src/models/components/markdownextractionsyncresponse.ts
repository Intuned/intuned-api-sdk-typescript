/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { FileFailedResponse, FileFailedResponse$ } from "./filefailedresponse.js";
import {
    MarkdownExtractionSuccessfulResponse,
    MarkdownExtractionSuccessfulResponse$,
} from "./markdownextractionsuccessfulresponse.js";
import * as z from "zod";

export type MarkdownExtractionSyncResponse =
    | (MarkdownExtractionSuccessfulResponse & { status: "completed" })
    | (FileFailedResponse & { status: "failed" });

/** @internal */
export namespace MarkdownExtractionSyncResponse$ {
    export const inboundSchema: z.ZodType<MarkdownExtractionSyncResponse, z.ZodTypeDef, unknown> =
        z.union([
            MarkdownExtractionSuccessfulResponse$.inboundSchema.and(
                z
                    .object({ status: z.literal("completed") })
                    .transform((v) => ({ status: v.status }))
            ),
            FileFailedResponse$.inboundSchema.and(
                z.object({ status: z.literal("failed") }).transform((v) => ({ status: v.status }))
            ),
        ]);

    export type Outbound =
        | (MarkdownExtractionSuccessfulResponse$.Outbound & { status: "completed" })
        | (FileFailedResponse$.Outbound & { status: "failed" });
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, MarkdownExtractionSyncResponse> =
        z.union([
            MarkdownExtractionSuccessfulResponse$.outboundSchema.and(
                z
                    .object({ status: z.literal("completed") })
                    .transform((v) => ({ status: v.status }))
            ),
            FileFailedResponse$.outboundSchema.and(
                z.object({ status: z.literal("failed") }).transform((v) => ({ status: v.status }))
            ),
        ]);
}
