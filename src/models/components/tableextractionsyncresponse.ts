/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { FileFailedResponse, FileFailedResponse$ } from "./filefailedresponse.js";
import {
    TableExtractionSuccessfulResponse,
    TableExtractionSuccessfulResponse$,
} from "./tableextractionsuccessfulresponse.js";
import * as z from "zod";

export type TableExtractionSyncResponse =
    | (TableExtractionSuccessfulResponse & { status: "completed" })
    | (FileFailedResponse & { status: "failed" });

/** @internal */
export namespace TableExtractionSyncResponse$ {
    export const inboundSchema: z.ZodType<TableExtractionSyncResponse, z.ZodTypeDef, unknown> =
        z.union([
            TableExtractionSuccessfulResponse$.inboundSchema.and(
                z
                    .object({ status: z.literal("completed") })
                    .transform((v) => ({ status: v.status }))
            ),
            FileFailedResponse$.inboundSchema.and(
                z.object({ status: z.literal("failed") }).transform((v) => ({ status: v.status }))
            ),
        ]);

    export type Outbound =
        | (TableExtractionSuccessfulResponse$.Outbound & { status: "completed" })
        | (FileFailedResponse$.Outbound & { status: "failed" });
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TableExtractionSyncResponse> =
        z.union([
            TableExtractionSuccessfulResponse$.outboundSchema.and(
                z
                    .object({ status: z.literal("completed") })
                    .transform((v) => ({ status: v.status }))
            ),
            FileFailedResponse$.outboundSchema.and(
                z.object({ status: z.literal("failed") }).transform((v) => ({ status: v.status }))
            ),
        ]);
}
