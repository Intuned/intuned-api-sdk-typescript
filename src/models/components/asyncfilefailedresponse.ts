/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The status of the asynchronous operation
 */
export enum AsyncFileFailedResponseStatus {
    Failed = "failed",
}

export type AsyncFileFailedResponse = {
    /**
     * Error code
     */
    error: string;
    /**
     * Error message
     */
    message: string;
    /**
     * The status of the asynchronous operation
     */
    status?: AsyncFileFailedResponseStatus | undefined;
    /**
     * The operation ID
     */
    operationId?: string | undefined;
    /**
     * The HTTP status code of the API run
     */
    statusCode?: number | undefined;
};

/** @internal */
export namespace AsyncFileFailedResponseStatus$ {
    export const inboundSchema = z.nativeEnum(AsyncFileFailedResponseStatus);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace AsyncFileFailedResponse$ {
    export const inboundSchema: z.ZodType<AsyncFileFailedResponse, z.ZodTypeDef, unknown> = z
        .object({
            error: z.string(),
            message: z.string(),
            status: AsyncFileFailedResponseStatus$.inboundSchema.optional(),
            operationId: z.string().optional(),
            statusCode: z.number().optional(),
        })
        .transform((v) => {
            return {
                error: v.error,
                message: v.message,
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.operationId === undefined ? null : { operationId: v.operationId }),
                ...(v.statusCode === undefined ? null : { statusCode: v.statusCode }),
            };
        });

    export type Outbound = {
        error: string;
        message: string;
        status?: string | undefined;
        operationId?: string | undefined;
        statusCode?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AsyncFileFailedResponse> = z
        .object({
            error: z.string(),
            message: z.string(),
            status: AsyncFileFailedResponseStatus$.outboundSchema.optional(),
            operationId: z.string().optional(),
            statusCode: z.number().optional(),
        })
        .transform((v) => {
            return {
                error: v.error,
                message: v.message,
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.operationId === undefined ? null : { operationId: v.operationId }),
                ...(v.statusCode === undefined ? null : { statusCode: v.statusCode }),
            };
        });
}
