/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
    AsyncFailedResponse,
    AsyncFailedResponse$,
    AsyncFailedResponseStatus,
} from "./asyncfailedresponse";
import {
    AsyncFilePendingResponse,
    AsyncFilePendingResponse$,
    Status,
} from "./asyncfilependingresponse";
import {
    TableExtractionAsyncSuccessfulResponse,
    TableExtractionAsyncSuccessfulResponse$,
    TableExtractionAsyncSuccessfulResponseStatus,
} from "./tableextractionasyncsuccessfulresponse";
import * as z from "zod";

export type TableExtractionAsyncResponse =
    | (AsyncFilePendingResponse & { status: Status.Pending })
    | (TableExtractionAsyncSuccessfulResponse & {
          status: TableExtractionAsyncSuccessfulResponseStatus.Completed;
      })
    | (AsyncFailedResponse & { status: AsyncFailedResponseStatus.Failed });

/** @internal */
export namespace TableExtractionAsyncResponse$ {
    export const inboundSchema: z.ZodType<TableExtractionAsyncResponse, z.ZodTypeDef, unknown> =
        z.union([
            AsyncFilePendingResponse$.inboundSchema.and(
                z
                    .object({ status: z.literal(Status.Pending) })
                    .transform((v) => ({ status: v.status }))
            ),
            TableExtractionAsyncSuccessfulResponse$.inboundSchema.and(
                z
                    .object({
                        status: z.literal(TableExtractionAsyncSuccessfulResponseStatus.Completed),
                    })
                    .transform((v) => ({ status: v.status }))
            ),
            AsyncFailedResponse$.inboundSchema.and(
                z
                    .object({ status: z.literal(AsyncFailedResponseStatus.Failed) })
                    .transform((v) => ({ status: v.status }))
            ),
        ]);

    export type Outbound =
        | (AsyncFilePendingResponse$.Outbound & { status: Status.Pending })
        | (TableExtractionAsyncSuccessfulResponse$.Outbound & {
              status: TableExtractionAsyncSuccessfulResponseStatus.Completed;
          })
        | (AsyncFailedResponse$.Outbound & { status: AsyncFailedResponseStatus.Failed });
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TableExtractionAsyncResponse> =
        z.union([
            AsyncFilePendingResponse$.outboundSchema.and(
                z
                    .object({ status: z.literal(Status.Pending) })
                    .transform((v) => ({ status: v.status }))
            ),
            TableExtractionAsyncSuccessfulResponse$.outboundSchema.and(
                z
                    .object({
                        status: z.literal(TableExtractionAsyncSuccessfulResponseStatus.Completed),
                    })
                    .transform((v) => ({ status: v.status }))
            ),
            AsyncFailedResponse$.outboundSchema.and(
                z
                    .object({ status: z.literal(AsyncFailedResponseStatus.Failed) })
                    .transform((v) => ({ status: v.status }))
            ),
        ]);
}
