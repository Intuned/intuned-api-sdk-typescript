/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type Payload = {
    apiName?: string | undefined;
    parameters?: { [k: string]: any } | undefined;
};

/** @internal */
export namespace Payload$ {
    export const inboundSchema: z.ZodType<Payload, z.ZodTypeDef, unknown> = z
        .object({
            apiName: z.string().optional(),
            parameters: z.record(z.any()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.apiName === undefined ? null : { apiName: v.apiName }),
                ...(v.parameters === undefined ? null : { parameters: v.parameters }),
            };
        });

    export type Outbound = {
        apiName?: string | undefined;
        parameters?: { [k: string]: any } | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Payload> = z
        .object({
            apiName: z.string().optional(),
            parameters: z.record(z.any()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.apiName === undefined ? null : { apiName: v.apiName }),
                ...(v.parameters === undefined ? null : { parameters: v.parameters }),
            };
        });
}
