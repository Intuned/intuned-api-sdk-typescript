/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export enum Type {
    Webhook = "webhook",
}

export type Sink = {
    type: Type;
    url: string;
};

/** @internal */
export namespace Type$ {
    export const inboundSchema = z.nativeEnum(Type);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace Sink$ {
    export const inboundSchema: z.ZodType<Sink, z.ZodTypeDef, unknown> = z
        .object({
            type: Type$.inboundSchema,
            url: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                url: v.url,
            };
        });

    export type Outbound = {
        type: string;
        url: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Sink> = z
        .object({
            type: Type$.outboundSchema,
            url: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                url: v.url,
            };
        });
}
