/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Identity, Identity$ } from "./identity";
import { Proxy, Proxy$ } from "./proxy";
import { Retry, Retry$ } from "./retry";
import * as z from "zod";

export type QueueRepeatItemInput = {
    apiName?: string | undefined;
    parameters?: { [k: string]: any } | undefined;
    retry?: Retry | undefined;
    identity?: Identity | undefined;
    proxy?: Proxy | undefined;
    /**
     * repeat duration, minimum of 10 minutes
     */
    repeat: string;
};

/** @internal */
export namespace QueueRepeatItemInput$ {
    export const inboundSchema: z.ZodType<QueueRepeatItemInput, z.ZodTypeDef, unknown> = z
        .object({
            apiName: z.string().optional(),
            parameters: z.record(z.any()).optional(),
            retry: Retry$.inboundSchema.optional(),
            identity: Identity$.inboundSchema.optional(),
            proxy: Proxy$.inboundSchema.optional(),
            repeat: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.apiName === undefined ? null : { apiName: v.apiName }),
                ...(v.parameters === undefined ? null : { parameters: v.parameters }),
                ...(v.retry === undefined ? null : { retry: v.retry }),
                ...(v.identity === undefined ? null : { identity: v.identity }),
                ...(v.proxy === undefined ? null : { proxy: v.proxy }),
                repeat: v.repeat,
            };
        });

    export type Outbound = {
        apiName?: string | undefined;
        parameters?: { [k: string]: any } | undefined;
        retry?: Retry$.Outbound | undefined;
        identity?: Identity$.Outbound | undefined;
        proxy?: Proxy$.Outbound | undefined;
        repeat: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, QueueRepeatItemInput> = z
        .object({
            apiName: z.string().optional(),
            parameters: z.record(z.any()).optional(),
            retry: Retry$.outboundSchema.optional(),
            identity: Identity$.outboundSchema.optional(),
            proxy: Proxy$.outboundSchema.optional(),
            repeat: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.apiName === undefined ? null : { apiName: v.apiName }),
                ...(v.parameters === undefined ? null : { parameters: v.parameters }),
                ...(v.retry === undefined ? null : { retry: v.retry }),
                ...(v.identity === undefined ? null : { identity: v.identity }),
                ...(v.proxy === undefined ? null : { proxy: v.proxy }),
                repeat: v.repeat,
            };
        });
}
