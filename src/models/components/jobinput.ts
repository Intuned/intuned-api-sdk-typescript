/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { AuthSession, AuthSession$ } from "./authsession";
import { JobConfiguration, JobConfiguration$ } from "./jobconfiguration";
import { JobPayload, JobPayload$ } from "./jobpayload";
import { JobSchedule, JobSchedule$ } from "./jobschedule";
import { JobSink, JobSink$ } from "./jobsink";
import { Proxy, Proxy$ } from "./proxy";
import * as z from "zod";

export type JobInput = {
    id: string;
    configuration: JobConfiguration;
    sink?: JobSink | undefined;
    payload: Array<JobPayload>;
    schedule?: JobSchedule | undefined;
    authSession?: AuthSession | undefined;
    proxy?: Proxy | undefined;
};

/** @internal */
export namespace JobInput$ {
    export const inboundSchema: z.ZodType<JobInput, z.ZodTypeDef, unknown> = z
        .object({
            id: z.string(),
            configuration: JobConfiguration$.inboundSchema,
            sink: JobSink$.inboundSchema.optional(),
            payload: z.array(JobPayload$.inboundSchema),
            schedule: JobSchedule$.inboundSchema.optional(),
            authSession: AuthSession$.inboundSchema.optional(),
            proxy: Proxy$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                id: v.id,
                configuration: v.configuration,
                ...(v.sink === undefined ? null : { sink: v.sink }),
                payload: v.payload,
                ...(v.schedule === undefined ? null : { schedule: v.schedule }),
                ...(v.authSession === undefined ? null : { authSession: v.authSession }),
                ...(v.proxy === undefined ? null : { proxy: v.proxy }),
            };
        });

    export type Outbound = {
        id: string;
        configuration: JobConfiguration$.Outbound;
        sink?: JobSink$.Outbound | undefined;
        payload: Array<JobPayload$.Outbound>;
        schedule?: JobSchedule$.Outbound | undefined;
        authSession?: AuthSession$.Outbound | undefined;
        proxy?: Proxy$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, JobInput> = z
        .object({
            id: z.string(),
            configuration: JobConfiguration$.outboundSchema,
            sink: JobSink$.outboundSchema.optional(),
            payload: z.array(JobPayload$.outboundSchema),
            schedule: JobSchedule$.outboundSchema.optional(),
            authSession: AuthSession$.outboundSchema.optional(),
            proxy: Proxy$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                id: v.id,
                configuration: v.configuration,
                ...(v.sink === undefined ? null : { sink: v.sink }),
                payload: v.payload,
                ...(v.schedule === undefined ? null : { schedule: v.schedule }),
                ...(v.authSession === undefined ? null : { authSession: v.authSession }),
                ...(v.proxy === undefined ? null : { proxy: v.proxy }),
            };
        });
}
