/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Configuration, Configuration$ } from "./configuration";
import { Payload, Payload$ } from "./payload";
import { Schedule, Schedule$ } from "./schedule";
import { Sink, Sink$ } from "./sink";
import * as z from "zod";

export type JobInputIdentity = {
    id?: string | undefined;
};

export enum JobInputProxy {
    UsWa = "US-WA",
    UsTx = "US-TX",
    UsFl = "US-FL",
    UsCa = "US-CA",
}

export type JobInput = {
    id: string;
    configuration: Configuration;
    sink: Sink;
    payload: Array<Payload>;
    schedule?: Schedule | undefined;
    identity?: JobInputIdentity | undefined;
    proxy?: JobInputProxy | undefined;
};

/** @internal */
export namespace JobInputIdentity$ {
    export const inboundSchema: z.ZodType<JobInputIdentity, z.ZodTypeDef, unknown> = z
        .object({
            id: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, JobInputIdentity> = z
        .object({
            id: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
            };
        });
}

/** @internal */
export namespace JobInputProxy$ {
    export const inboundSchema = z.nativeEnum(JobInputProxy);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace JobInput$ {
    export const inboundSchema: z.ZodType<JobInput, z.ZodTypeDef, unknown> = z
        .object({
            id: z.string(),
            configuration: Configuration$.inboundSchema,
            sink: Sink$.inboundSchema,
            payload: z.array(Payload$.inboundSchema),
            schedule: Schedule$.inboundSchema.optional(),
            identity: z.lazy(() => JobInputIdentity$.inboundSchema).optional(),
            proxy: JobInputProxy$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                id: v.id,
                configuration: v.configuration,
                sink: v.sink,
                payload: v.payload,
                ...(v.schedule === undefined ? null : { schedule: v.schedule }),
                ...(v.identity === undefined ? null : { identity: v.identity }),
                ...(v.proxy === undefined ? null : { proxy: v.proxy }),
            };
        });

    export type Outbound = {
        id: string;
        configuration: Configuration$.Outbound;
        sink: Sink$.Outbound;
        payload: Array<Payload$.Outbound>;
        schedule?: Schedule$.Outbound | undefined;
        identity?: JobInputIdentity$.Outbound | undefined;
        proxy?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, JobInput> = z
        .object({
            id: z.string(),
            configuration: Configuration$.outboundSchema,
            sink: Sink$.outboundSchema,
            payload: z.array(Payload$.outboundSchema),
            schedule: Schedule$.outboundSchema.optional(),
            identity: z.lazy(() => JobInputIdentity$.outboundSchema).optional(),
            proxy: JobInputProxy$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                id: v.id,
                configuration: v.configuration,
                sink: v.sink,
                payload: v.payload,
                ...(v.schedule === undefined ? null : { schedule: v.schedule }),
                ...(v.identity === undefined ? null : { identity: v.identity }),
                ...(v.proxy === undefined ? null : { proxy: v.proxy }),
            };
        });
}
