/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type Start = number | string;

export type End = number | string;

/**
 * A range of values for a calendar property. The type depends on the property.
 */
export type JobCalendarRange = {
    /**
     * Start of the range
     */
    start: number | string;
    /**
     * End of the range. defaults to `start`.
     */
    end?: number | string | undefined;
    /**
     * Step of the range
     */
    step?: number | undefined;
};

/** @internal */
export namespace Start$ {
    export const inboundSchema: z.ZodType<Start, z.ZodTypeDef, unknown> = z.union([
        z.number(),
        z.string(),
    ]);

    export type Outbound = number | string;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Start> = z.union([
        z.number(),
        z.string(),
    ]);
}

/** @internal */
export namespace End$ {
    export const inboundSchema: z.ZodType<End, z.ZodTypeDef, unknown> = z.union([
        z.number(),
        z.string(),
    ]);

    export type Outbound = number | string;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, End> = z.union([
        z.number(),
        z.string(),
    ]);
}

/** @internal */
export namespace JobCalendarRange$ {
    export const inboundSchema: z.ZodType<JobCalendarRange, z.ZodTypeDef, unknown> = z.object({
        start: z.union([z.number(), z.string()]),
        end: z.union([z.number(), z.string()]).optional(),
        step: z.number().default(1),
    });

    export type Outbound = {
        start: number | string;
        end?: number | string | undefined;
        step: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, JobCalendarRange> = z.object({
        start: z.union([z.number(), z.string()]),
        end: z.union([z.number(), z.string()]).optional(),
        step: z.number().default(1),
    });
}
