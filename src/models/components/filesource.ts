/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { FileBase64Source, FileBase64Source$, FileBase64SourceType } from "./filebase64source";
import { FileUrlSource, FileUrlSource$, FileUrlSourceType } from "./fileurlsource";
import * as z from "zod";

export type FileSource =
    | (FileUrlSource & { type: FileUrlSourceType.Url })
    | (FileBase64Source & { type: FileBase64SourceType.Base64 });

/** @internal */
export namespace FileSource$ {
    export const inboundSchema: z.ZodType<FileSource, z.ZodTypeDef, unknown> = z.union([
        FileUrlSource$.inboundSchema.and(
            z
                .object({ type: z.literal(FileUrlSourceType.Url) })
                .transform((v) => ({ type: v.type }))
        ),
        FileBase64Source$.inboundSchema.and(
            z
                .object({ type: z.literal(FileBase64SourceType.Base64) })
                .transform((v) => ({ type: v.type }))
        ),
    ]);

    export type Outbound =
        | (FileUrlSource$.Outbound & { type: FileUrlSourceType.Url })
        | (FileBase64Source$.Outbound & { type: FileBase64SourceType.Base64 });
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FileSource> = z.union([
        FileUrlSource$.outboundSchema.and(
            z
                .object({ type: z.literal(FileUrlSourceType.Url) })
                .transform((v) => ({ type: v.type }))
        ),
        FileBase64Source$.outboundSchema.and(
            z
                .object({ type: z.literal(FileBase64SourceType.Base64) })
                .transform((v) => ({ type: v.type }))
        ),
    ]);
}
