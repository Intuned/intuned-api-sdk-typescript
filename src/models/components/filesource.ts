/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { FileBase64Source, FileBase64Source$ } from "./filebase64source.js";
import { FileUrlSource, FileUrlSource$ } from "./fileurlsource.js";
import * as z from "zod";

export type FileSource =
    | (FileUrlSource & { type: "url" })
    | (FileBase64Source & { type: "base64" });

/** @internal */
export namespace FileSource$ {
    export const inboundSchema: z.ZodType<FileSource, z.ZodTypeDef, unknown> = z.union([
        FileUrlSource$.inboundSchema.and(
            z.object({ type: z.literal("url") }).transform((v) => ({ type: v.type }))
        ),
        FileBase64Source$.inboundSchema.and(
            z.object({ type: z.literal("base64") }).transform((v) => ({ type: v.type }))
        ),
    ]);

    export type Outbound =
        | (FileUrlSource$.Outbound & { type: "url" })
        | (FileBase64Source$.Outbound & { type: "base64" });
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FileSource> = z.union([
        FileUrlSource$.outboundSchema.and(
            z.object({ type: z.literal("url") }).transform((v) => ({ type: v.type }))
        ),
        FileBase64Source$.outboundSchema.and(
            z.object({ type: z.literal("base64") }).transform((v) => ({ type: v.type }))
        ),
    ]);
}
