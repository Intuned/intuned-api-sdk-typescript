/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import {
  FileBase64Source,
  FileBase64Source$inboundSchema,
  FileBase64Source$Outbound,
  FileBase64Source$outboundSchema,
} from "./filebase64source.js";
import {
  FileUrlSource,
  FileUrlSource$inboundSchema,
  FileUrlSource$Outbound,
  FileUrlSource$outboundSchema,
} from "./fileurlsource.js";

export type FileSource =
  | (FileUrlSource & { type: "url" })
  | (FileBase64Source & { type: "base64" });

/** @internal */
export const FileSource$inboundSchema: z.ZodType<
  FileSource,
  z.ZodTypeDef,
  unknown
> = z.union([
  FileUrlSource$inboundSchema.and(
    z.object({ type: z.literal("url") }).transform((v) => ({ type: v.type })),
  ),
  FileBase64Source$inboundSchema.and(
    z.object({ type: z.literal("base64") }).transform((v) => ({
      type: v.type,
    })),
  ),
]);

/** @internal */
export type FileSource$Outbound =
  | (FileUrlSource$Outbound & { type: "url" })
  | (FileBase64Source$Outbound & { type: "base64" });

/** @internal */
export const FileSource$outboundSchema: z.ZodType<
  FileSource$Outbound,
  z.ZodTypeDef,
  FileSource
> = z.union([
  FileUrlSource$outboundSchema.and(
    z.object({ type: z.literal("url") }).transform((v) => ({ type: v.type })),
  ),
  FileBase64Source$outboundSchema.and(
    z.object({ type: z.literal("base64") }).transform((v) => ({
      type: v.type,
    })),
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FileSource$ {
  /** @deprecated use `FileSource$inboundSchema` instead. */
  export const inboundSchema = FileSource$inboundSchema;
  /** @deprecated use `FileSource$outboundSchema` instead. */
  export const outboundSchema = FileSource$outboundSchema;
  /** @deprecated use `FileSource$Outbound` instead. */
  export type Outbound = FileSource$Outbound;
}
