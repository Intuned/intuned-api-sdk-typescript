/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types";
import * as z from "zod";

/**
 * Status of the auth session creation operation
 */
export const AuthSessionCreateRequestedMoreInfoResultStatus = {
    RequestedMoreInfo: "requested_more_info",
} as const;
/**
 * Status of the auth session creation operation
 */
export type AuthSessionCreateRequestedMoreInfoResultStatus = ClosedEnum<
    typeof AuthSessionCreateRequestedMoreInfoResultStatus
>;

/**
 * Type of the requested info.
 */
export const DetailsRequestType = {
    Otp: "otp",
} as const;
/**
 * Type of the requested info.
 */
export type DetailsRequestType = ClosedEnum<typeof DetailsRequestType>;

/**
 * The requested action.
 */
export const DetailsAction = {
    RequestMoreInfo: "request_more_info",
} as const;
/**
 * The requested action.
 */
export type DetailsAction = ClosedEnum<typeof DetailsAction>;

/**
 * Requested more info - OTP
 */
export type Details2 = {
    /**
     * Type of the requested info.
     */
    requestType: DetailsRequestType;
    /**
     * The requested action.
     */
    action: DetailsAction;
    /**
     * Message sent from the `create` file.
     */
    messageToUser: string;
};

/**
 * Type of the requested info.
 */
export const RequestType = {
    MultipleChoice: "multiple_choice",
} as const;
/**
 * Type of the requested info.
 */
export type RequestType = ClosedEnum<typeof RequestType>;

/**
 * The requested action.
 */
export const Action = {
    RequestMoreInfo: "request_more_info",
} as const;
/**
 * The requested action.
 */
export type Action = ClosedEnum<typeof Action>;

/**
 * Requested more info - Multiple choice.
 */
export type Details1 = {
    /**
     * Multiple choice choices. An array of strings.
     */
    choices: Array<string>;
    /**
     * Type of the requested info.
     */
    requestType: RequestType;
    /**
     * The requested action.
     */
    action: Action;
    /**
     * Message sent from the `create` file.
     */
    messageToUser: string;
};

export type Details = Details2 | Details1;

/**
 * Auth session create requested more info
 */
export type AuthSessionCreateRequestedMoreInfoResult = {
    /**
     * Status of the auth session creation operation
     */
    status: AuthSessionCreateRequestedMoreInfoResultStatus;
    /**
     * The ID of the info request action. Used in resuming the creation.
     */
    id: string;
    details: Details2 | Details1;
};

/** @internal */
export namespace AuthSessionCreateRequestedMoreInfoResultStatus$ {
    export const inboundSchema = z.nativeEnum(AuthSessionCreateRequestedMoreInfoResultStatus);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace DetailsRequestType$ {
    export const inboundSchema = z.nativeEnum(DetailsRequestType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace DetailsAction$ {
    export const inboundSchema = z.nativeEnum(DetailsAction);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace Details2$ {
    export const inboundSchema: z.ZodType<Details2, z.ZodTypeDef, unknown> = z.object({
        requestType: DetailsRequestType$.inboundSchema,
        action: DetailsAction$.inboundSchema,
        messageToUser: z.string(),
    });

    export type Outbound = {
        requestType: string;
        action: string;
        messageToUser: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Details2> = z.object({
        requestType: DetailsRequestType$.outboundSchema,
        action: DetailsAction$.outboundSchema,
        messageToUser: z.string(),
    });
}

/** @internal */
export namespace RequestType$ {
    export const inboundSchema = z.nativeEnum(RequestType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace Action$ {
    export const inboundSchema = z.nativeEnum(Action);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace Details1$ {
    export const inboundSchema: z.ZodType<Details1, z.ZodTypeDef, unknown> = z.object({
        choices: z.array(z.string()),
        requestType: RequestType$.inboundSchema,
        action: Action$.inboundSchema,
        messageToUser: z.string(),
    });

    export type Outbound = {
        choices: Array<string>;
        requestType: string;
        action: string;
        messageToUser: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Details1> = z.object({
        choices: z.array(z.string()),
        requestType: RequestType$.outboundSchema,
        action: Action$.outboundSchema,
        messageToUser: z.string(),
    });
}

/** @internal */
export namespace Details$ {
    export const inboundSchema: z.ZodType<Details, z.ZodTypeDef, unknown> = z.union([
        z.lazy(() => Details2$.inboundSchema),
        z.lazy(() => Details1$.inboundSchema),
    ]);

    export type Outbound = Details2$.Outbound | Details1$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Details> = z.union([
        z.lazy(() => Details2$.outboundSchema),
        z.lazy(() => Details1$.outboundSchema),
    ]);
}

/** @internal */
export namespace AuthSessionCreateRequestedMoreInfoResult$ {
    export const inboundSchema: z.ZodType<
        AuthSessionCreateRequestedMoreInfoResult,
        z.ZodTypeDef,
        unknown
    > = z.object({
        status: AuthSessionCreateRequestedMoreInfoResultStatus$.inboundSchema,
        id: z.string(),
        details: z.union([
            z.lazy(() => Details2$.inboundSchema),
            z.lazy(() => Details1$.inboundSchema),
        ]),
    });

    export type Outbound = {
        status: string;
        id: string;
        details: Details2$.Outbound | Details1$.Outbound;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        AuthSessionCreateRequestedMoreInfoResult
    > = z.object({
        status: AuthSessionCreateRequestedMoreInfoResultStatus$.outboundSchema,
        id: z.string(),
        details: z.union([
            z.lazy(() => Details2$.outboundSchema),
            z.lazy(() => Details1$.outboundSchema),
        ]),
    });
}
