/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export enum AuthSessionCreateRequestedMoreInfoResultStatus {
    RequestedMoreInfo = "requested_more_info",
}

export enum DetailsRequestType {
    Otp = "otp",
}

export enum DetailsAction {
    RequestMoreInfo = "request_more_info",
}

export type Details2 = {
    requestType: DetailsRequestType;
    action: DetailsAction;
    messageToUser: string;
};

export enum RequestType {
    MultipleChoice = "multiple_choice",
}

export enum Action {
    RequestMoreInfo = "request_more_info",
}

export type Details1 = {
    choices: Array<string>;
    requestType: RequestType;
    action: Action;
    messageToUser: string;
};

export type Details = Details2 | Details1;

export type AuthSessionCreateRequestedMoreInfoResult = {
    status: AuthSessionCreateRequestedMoreInfoResultStatus;
    id: string;
    details: Details2 | Details1;
};

/** @internal */
export namespace AuthSessionCreateRequestedMoreInfoResultStatus$ {
    export const inboundSchema = z.nativeEnum(AuthSessionCreateRequestedMoreInfoResultStatus);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace DetailsRequestType$ {
    export const inboundSchema = z.nativeEnum(DetailsRequestType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace DetailsAction$ {
    export const inboundSchema = z.nativeEnum(DetailsAction);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace Details2$ {
    export const inboundSchema: z.ZodType<Details2, z.ZodTypeDef, unknown> = z
        .object({
            requestType: DetailsRequestType$.inboundSchema,
            action: DetailsAction$.inboundSchema,
            messageToUser: z.string(),
        })
        .transform((v) => {
            return {
                requestType: v.requestType,
                action: v.action,
                messageToUser: v.messageToUser,
            };
        });

    export type Outbound = {
        requestType: string;
        action: string;
        messageToUser: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Details2> = z
        .object({
            requestType: DetailsRequestType$.outboundSchema,
            action: DetailsAction$.outboundSchema,
            messageToUser: z.string(),
        })
        .transform((v) => {
            return {
                requestType: v.requestType,
                action: v.action,
                messageToUser: v.messageToUser,
            };
        });
}

/** @internal */
export namespace RequestType$ {
    export const inboundSchema = z.nativeEnum(RequestType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace Action$ {
    export const inboundSchema = z.nativeEnum(Action);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace Details1$ {
    export const inboundSchema: z.ZodType<Details1, z.ZodTypeDef, unknown> = z
        .object({
            choices: z.array(z.string()),
            requestType: RequestType$.inboundSchema,
            action: Action$.inboundSchema,
            messageToUser: z.string(),
        })
        .transform((v) => {
            return {
                choices: v.choices,
                requestType: v.requestType,
                action: v.action,
                messageToUser: v.messageToUser,
            };
        });

    export type Outbound = {
        choices: Array<string>;
        requestType: string;
        action: string;
        messageToUser: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Details1> = z
        .object({
            choices: z.array(z.string()),
            requestType: RequestType$.outboundSchema,
            action: Action$.outboundSchema,
            messageToUser: z.string(),
        })
        .transform((v) => {
            return {
                choices: v.choices,
                requestType: v.requestType,
                action: v.action,
                messageToUser: v.messageToUser,
            };
        });
}

/** @internal */
export namespace Details$ {
    export const inboundSchema: z.ZodType<Details, z.ZodTypeDef, unknown> = z.union([
        z.lazy(() => Details2$.inboundSchema),
        z.lazy(() => Details1$.inboundSchema),
    ]);

    export type Outbound = Details2$.Outbound | Details1$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Details> = z.union([
        z.lazy(() => Details2$.outboundSchema),
        z.lazy(() => Details1$.outboundSchema),
    ]);
}

/** @internal */
export namespace AuthSessionCreateRequestedMoreInfoResult$ {
    export const inboundSchema: z.ZodType<
        AuthSessionCreateRequestedMoreInfoResult,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            status: AuthSessionCreateRequestedMoreInfoResultStatus$.inboundSchema,
            id: z.string(),
            details: z.union([
                z.lazy(() => Details2$.inboundSchema),
                z.lazy(() => Details1$.inboundSchema),
            ]),
        })
        .transform((v) => {
            return {
                status: v.status,
                id: v.id,
                details: v.details,
            };
        });

    export type Outbound = {
        status: string;
        id: string;
        details: Details2$.Outbound | Details1$.Outbound;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        AuthSessionCreateRequestedMoreInfoResult
    > = z
        .object({
            status: AuthSessionCreateRequestedMoreInfoResultStatus$.outboundSchema,
            id: z.string(),
            details: z.union([
                z.lazy(() => Details2$.outboundSchema),
                z.lazy(() => Details1$.outboundSchema),
            ]),
        })
        .transform((v) => {
            return {
                status: v.status,
                id: v.id,
                details: v.details,
            };
        });
}
