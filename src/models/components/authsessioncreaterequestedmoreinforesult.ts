/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * Status of the auth session creation operation
 */
export enum AuthSessionCreateRequestedMoreInfoResultStatus {
    RequestedMoreInfo = "requested_more_info",
}

/**
 * Type of the requested info.
 */
export enum DetailsRequestType {
    Otp = "otp",
}

/**
 * The requested action.
 */
export enum DetailsAction {
    RequestMoreInfo = "request_more_info",
}

/**
 * Requested more info - OTP
 */
export type Otp = {
    /**
     * Type of the requested info.
     */
    requestType: DetailsRequestType;
    /**
     * The requested action.
     */
    action: DetailsAction;
    /**
     * Message sent from the `create` file.
     */
    messageToUser: string;
};

/**
 * Type of the requested info.
 */
export enum RequestType {
    MultipleChoice = "multiple_choice",
}

/**
 * The requested action.
 */
export enum Action {
    RequestMoreInfo = "request_more_info",
}

/**
 * Requested more info - Multiple choice.
 */
export type MultipleChoice = {
    /**
     * Multiple choice choices. An array of strings.
     */
    choices: Array<string>;
    /**
     * Type of the requested info.
     */
    requestType: RequestType;
    /**
     * The requested action.
     */
    action: Action;
    /**
     * Message sent from the `create` file.
     */
    messageToUser: string;
};

export type Details = Otp | MultipleChoice;

/**
 * Auth session create requested more info
 */
export type AuthSessionCreateRequestedMoreInfoResult = {
    /**
     * Status of the auth session creation operation
     */
    status: AuthSessionCreateRequestedMoreInfoResultStatus;
    /**
     * The ID of the info request action. Used in resuming the creation.
     */
    id: string;
    details: Otp | MultipleChoice;
};

/** @internal */
export namespace AuthSessionCreateRequestedMoreInfoResultStatus$ {
    export const inboundSchema = z.nativeEnum(AuthSessionCreateRequestedMoreInfoResultStatus);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace DetailsRequestType$ {
    export const inboundSchema = z.nativeEnum(DetailsRequestType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace DetailsAction$ {
    export const inboundSchema = z.nativeEnum(DetailsAction);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace Otp$ {
    export const inboundSchema: z.ZodType<Otp, z.ZodTypeDef, unknown> = z.object({
        requestType: DetailsRequestType$.inboundSchema,
        action: DetailsAction$.inboundSchema,
        messageToUser: z.string(),
    });

    export type Outbound = {
        requestType: string;
        action: string;
        messageToUser: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Otp> = z.object({
        requestType: DetailsRequestType$.outboundSchema,
        action: DetailsAction$.outboundSchema,
        messageToUser: z.string(),
    });
}

/** @internal */
export namespace RequestType$ {
    export const inboundSchema = z.nativeEnum(RequestType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace Action$ {
    export const inboundSchema = z.nativeEnum(Action);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace MultipleChoice$ {
    export const inboundSchema: z.ZodType<MultipleChoice, z.ZodTypeDef, unknown> = z.object({
        choices: z.array(z.string()),
        requestType: RequestType$.inboundSchema,
        action: Action$.inboundSchema,
        messageToUser: z.string(),
    });

    export type Outbound = {
        choices: Array<string>;
        requestType: string;
        action: string;
        messageToUser: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, MultipleChoice> = z.object({
        choices: z.array(z.string()),
        requestType: RequestType$.outboundSchema,
        action: Action$.outboundSchema,
        messageToUser: z.string(),
    });
}

/** @internal */
export namespace Details$ {
    export const inboundSchema: z.ZodType<Details, z.ZodTypeDef, unknown> = z.union([
        z.lazy(() => Otp$.inboundSchema),
        z.lazy(() => MultipleChoice$.inboundSchema),
    ]);

    export type Outbound = Otp$.Outbound | MultipleChoice$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Details> = z.union([
        z.lazy(() => Otp$.outboundSchema),
        z.lazy(() => MultipleChoice$.outboundSchema),
    ]);
}

/** @internal */
export namespace AuthSessionCreateRequestedMoreInfoResult$ {
    export const inboundSchema: z.ZodType<
        AuthSessionCreateRequestedMoreInfoResult,
        z.ZodTypeDef,
        unknown
    > = z.object({
        status: AuthSessionCreateRequestedMoreInfoResultStatus$.inboundSchema,
        id: z.string(),
        details: z.union([
            z.lazy(() => Otp$.inboundSchema),
            z.lazy(() => MultipleChoice$.inboundSchema),
        ]),
    });

    export type Outbound = {
        status: string;
        id: string;
        details: Otp$.Outbound | MultipleChoice$.Outbound;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        AuthSessionCreateRequestedMoreInfoResult
    > = z.object({
        status: AuthSessionCreateRequestedMoreInfoResultStatus$.outboundSchema,
        id: z.string(),
        details: z.union([
            z.lazy(() => Otp$.outboundSchema),
            z.lazy(() => MultipleChoice$.outboundSchema),
        ]),
    });
}
