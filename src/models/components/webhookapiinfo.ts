/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { APIParameters, APIParameters$ } from "./apiparameters.js";
import {
    WebhookAPIInfoResultCompleted,
    WebhookAPIInfoResultCompleted$,
} from "./webhookapiinforesultcompleted.js";
import {
    WebhookAPIInfoResultFailed,
    WebhookAPIInfoResultFailed$,
} from "./webhookapiinforesultfailed.js";
import * as z from "zod";

export type WebhookAPIInfoResult = WebhookAPIInfoResultCompleted | WebhookAPIInfoResultFailed;

/**
 * Webhook API info
 */
export type WebhookAPIInfo = {
    /**
     * The name of the API
     */
    name: string;
    /**
     * The parameters to be passed to the API.
     */
    parameters?: APIParameters | undefined;
    result: WebhookAPIInfoResultCompleted | WebhookAPIInfoResultFailed;
    /**
     * The run ID of the API
     */
    runId: string;
};

/** @internal */
export namespace WebhookAPIInfoResult$ {
    export const inboundSchema: z.ZodType<WebhookAPIInfoResult, z.ZodTypeDef, unknown> = z.union([
        WebhookAPIInfoResultCompleted$.inboundSchema,
        WebhookAPIInfoResultFailed$.inboundSchema,
    ]);

    export type Outbound =
        | WebhookAPIInfoResultCompleted$.Outbound
        | WebhookAPIInfoResultFailed$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, WebhookAPIInfoResult> = z.union([
        WebhookAPIInfoResultCompleted$.outboundSchema,
        WebhookAPIInfoResultFailed$.outboundSchema,
    ]);
}

/** @internal */
export namespace WebhookAPIInfo$ {
    export const inboundSchema: z.ZodType<WebhookAPIInfo, z.ZodTypeDef, unknown> = z.object({
        name: z.string(),
        parameters: APIParameters$.inboundSchema.optional(),
        result: z.union([
            WebhookAPIInfoResultCompleted$.inboundSchema,
            WebhookAPIInfoResultFailed$.inboundSchema,
        ]),
        runId: z.string(),
    });

    export type Outbound = {
        name: string;
        parameters?: APIParameters$.Outbound | undefined;
        result: WebhookAPIInfoResultCompleted$.Outbound | WebhookAPIInfoResultFailed$.Outbound;
        runId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, WebhookAPIInfo> = z.object({
        name: z.string(),
        parameters: APIParameters$.outboundSchema.optional(),
        result: z.union([
            WebhookAPIInfoResultCompleted$.outboundSchema,
            WebhookAPIInfoResultFailed$.outboundSchema,
        ]),
        runId: z.string(),
    });
}
