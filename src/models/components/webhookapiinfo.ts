/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
    APIParameters,
    APIParameters$inboundSchema,
    APIParameters$Outbound,
    APIParameters$outboundSchema,
} from "./apiparameters.js";
import {
    WebhookAPIInfoResultCompleted,
    WebhookAPIInfoResultCompleted$inboundSchema,
    WebhookAPIInfoResultCompleted$Outbound,
    WebhookAPIInfoResultCompleted$outboundSchema,
} from "./webhookapiinforesultcompleted.js";
import {
    WebhookAPIInfoResultFailed,
    WebhookAPIInfoResultFailed$inboundSchema,
    WebhookAPIInfoResultFailed$Outbound,
    WebhookAPIInfoResultFailed$outboundSchema,
} from "./webhookapiinforesultfailed.js";
import * as z from "zod";

export type WebhookAPIInfoResult = WebhookAPIInfoResultCompleted | WebhookAPIInfoResultFailed;

/**
 * Webhook API info
 */
export type WebhookAPIInfo = {
    /**
     * The name of the API
     */
    name: string;
    /**
     * The parameters to be passed to the API.
     */
    parameters?: APIParameters | undefined;
    result: WebhookAPIInfoResultCompleted | WebhookAPIInfoResultFailed;
    /**
     * The run ID of the API
     */
    runId: string;
};

/** @internal */
export const WebhookAPIInfoResult$inboundSchema: z.ZodType<
    WebhookAPIInfoResult,
    z.ZodTypeDef,
    unknown
> = z.union([
    WebhookAPIInfoResultCompleted$inboundSchema,
    WebhookAPIInfoResultFailed$inboundSchema,
]);

/** @internal */
export type WebhookAPIInfoResult$Outbound =
    | WebhookAPIInfoResultCompleted$Outbound
    | WebhookAPIInfoResultFailed$Outbound;

/** @internal */
export const WebhookAPIInfoResult$outboundSchema: z.ZodType<
    WebhookAPIInfoResult$Outbound,
    z.ZodTypeDef,
    WebhookAPIInfoResult
> = z.union([
    WebhookAPIInfoResultCompleted$outboundSchema,
    WebhookAPIInfoResultFailed$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WebhookAPIInfoResult$ {
    /** @deprecated use `WebhookAPIInfoResult$inboundSchema` instead. */
    export const inboundSchema = WebhookAPIInfoResult$inboundSchema;
    /** @deprecated use `WebhookAPIInfoResult$outboundSchema` instead. */
    export const outboundSchema = WebhookAPIInfoResult$outboundSchema;
    /** @deprecated use `WebhookAPIInfoResult$Outbound` instead. */
    export type Outbound = WebhookAPIInfoResult$Outbound;
}

/** @internal */
export const WebhookAPIInfo$inboundSchema: z.ZodType<WebhookAPIInfo, z.ZodTypeDef, unknown> =
    z.object({
        name: z.string(),
        parameters: APIParameters$inboundSchema.optional(),
        result: z.union([
            WebhookAPIInfoResultCompleted$inboundSchema,
            WebhookAPIInfoResultFailed$inboundSchema,
        ]),
        runId: z.string(),
    });

/** @internal */
export type WebhookAPIInfo$Outbound = {
    name: string;
    parameters?: APIParameters$Outbound | undefined;
    result: WebhookAPIInfoResultCompleted$Outbound | WebhookAPIInfoResultFailed$Outbound;
    runId: string;
};

/** @internal */
export const WebhookAPIInfo$outboundSchema: z.ZodType<
    WebhookAPIInfo$Outbound,
    z.ZodTypeDef,
    WebhookAPIInfo
> = z.object({
    name: z.string(),
    parameters: APIParameters$outboundSchema.optional(),
    result: z.union([
        WebhookAPIInfoResultCompleted$outboundSchema,
        WebhookAPIInfoResultFailed$outboundSchema,
    ]),
    runId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WebhookAPIInfo$ {
    /** @deprecated use `WebhookAPIInfo$inboundSchema` instead. */
    export const inboundSchema = WebhookAPIInfo$inboundSchema;
    /** @deprecated use `WebhookAPIInfo$outboundSchema` instead. */
    export const outboundSchema = WebhookAPIInfo$outboundSchema;
    /** @deprecated use `WebhookAPIInfo$Outbound` instead. */
    export type Outbound = WebhookAPIInfo$Outbound;
}
