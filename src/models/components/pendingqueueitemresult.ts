/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types";
import * as z from "zod";

/**
 * Execution status of the item
 */
export const PendingQueueItemResultStatus = {
    Pending: "pending",
} as const;
/**
 * Execution status of the item
 */
export type PendingQueueItemResultStatus = ClosedEnum<typeof PendingQueueItemResultStatus>;

export type PendingQueueItemResult = {
    /**
     * The run ID of the item
     */
    runId: string;
    /**
     * Execution status of the item
     */
    status: PendingQueueItemResultStatus;
};

/** @internal */
export namespace PendingQueueItemResultStatus$ {
    export const inboundSchema = z.nativeEnum(PendingQueueItemResultStatus);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace PendingQueueItemResult$ {
    export const inboundSchema: z.ZodType<PendingQueueItemResult, z.ZodTypeDef, unknown> = z.object(
        {
            runId: z.string(),
            status: PendingQueueItemResultStatus$.inboundSchema,
        }
    );

    export type Outbound = {
        runId: string;
        status: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PendingQueueItemResult> =
        z.object({
            runId: z.string(),
            status: PendingQueueItemResultStatus$.outboundSchema,
        });
}
