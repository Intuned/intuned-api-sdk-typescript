/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export enum Location {
    UsWa = "US-WA",
    UsTx = "US-TX",
    UsFl = "US-FL",
    UsCa = "US-CA",
}

export type Proxy = {
    enabled: boolean;
    location?: Location | undefined;
};

/** @internal */
export namespace Location$ {
    export const inboundSchema = z.nativeEnum(Location);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace Proxy$ {
    export const inboundSchema: z.ZodType<Proxy, z.ZodTypeDef, unknown> = z
        .object({
            enabled: z.boolean(),
            location: Location$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                enabled: v.enabled,
                ...(v.location === undefined ? null : { location: v.location }),
            };
        });

    export type Outbound = {
        enabled: boolean;
        location?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Proxy> = z
        .object({
            enabled: z.boolean(),
            location: Location$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                enabled: v.enabled,
                ...(v.location === undefined ? null : { location: v.location }),
            };
        });
}
