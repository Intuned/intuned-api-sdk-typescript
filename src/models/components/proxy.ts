/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The proxy location. If proxy is enabled and this value is not provided, a rotating proxy will be used.
 */
export enum Location {
    UsWa = "US-WA",
    UsTx = "US-TX",
    UsFl = "US-FL",
    UsCa = "US-CA",
}

/**
 * Proxy configuration. If configured, the project API will run using this proxy for all requests.
 */
export type Proxy = {
    /**
     * Whether the proxy is enabled or not.
     */
    enabled: boolean;
    /**
     * The proxy location. If proxy is enabled and this value is not provided, a rotating proxy will be used.
     */
    location?: Location | undefined;
};

/** @internal */
export namespace Location$ {
    export const inboundSchema = z.nativeEnum(Location);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace Proxy$ {
    export const inboundSchema: z.ZodType<Proxy, z.ZodTypeDef, unknown> = z.object({
        enabled: z.boolean(),
        location: Location$.inboundSchema.optional(),
    });

    export type Outbound = {
        enabled: boolean;
        location?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Proxy> = z.object({
        enabled: z.boolean(),
        location: Location$.outboundSchema.optional(),
    });
}
