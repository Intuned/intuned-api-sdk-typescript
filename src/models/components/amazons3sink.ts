/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export const AmazonS3SinkType = {
    S3: "s3",
} as const;
export type AmazonS3SinkType = ClosedEnum<typeof AmazonS3SinkType>;

/**
 * Amazon S3 bucket sink configuration
 */
export type AmazonS3Sink = {
    type: AmazonS3SinkType;
    /**
     * The S3 bucket region
     */
    region: string;
    /**
     * The S3 bucket name
     */
    bucket: string;
    /**
     * Access key ID for the IAM user to use the bucket. The IAM user has to have write permissions to the bucket.
     */
    accessKeyId: string;
    /**
     * Secret access key of the IAM user to use the bucket.
     */
    secretAccessKey: string;
    /**
     * A prefix added to the key of the file to be written. This can be used to define a folder where all results are stored.
     */
    prefix?: string | undefined;
    /**
     * If enabled, failed payload runs will ***not*** be written to the bucket.
     */
    skipOnFail?: boolean | undefined;
};

/** @internal */
export const AmazonS3SinkType$inboundSchema: z.ZodNativeEnum<typeof AmazonS3SinkType> =
    z.nativeEnum(AmazonS3SinkType);

/** @internal */
export const AmazonS3SinkType$outboundSchema: z.ZodNativeEnum<typeof AmazonS3SinkType> =
    AmazonS3SinkType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AmazonS3SinkType$ {
    /** @deprecated use `AmazonS3SinkType$inboundSchema` instead. */
    export const inboundSchema = AmazonS3SinkType$inboundSchema;
    /** @deprecated use `AmazonS3SinkType$outboundSchema` instead. */
    export const outboundSchema = AmazonS3SinkType$outboundSchema;
}

/** @internal */
export const AmazonS3Sink$inboundSchema: z.ZodType<AmazonS3Sink, z.ZodTypeDef, unknown> = z.object({
    type: AmazonS3SinkType$inboundSchema,
    region: z.string(),
    bucket: z.string(),
    accessKeyId: z.string(),
    secretAccessKey: z.string(),
    prefix: z.string().optional(),
    skipOnFail: z.boolean().default(false),
});

/** @internal */
export type AmazonS3Sink$Outbound = {
    type: string;
    region: string;
    bucket: string;
    accessKeyId: string;
    secretAccessKey: string;
    prefix?: string | undefined;
    skipOnFail: boolean;
};

/** @internal */
export const AmazonS3Sink$outboundSchema: z.ZodType<
    AmazonS3Sink$Outbound,
    z.ZodTypeDef,
    AmazonS3Sink
> = z.object({
    type: AmazonS3SinkType$outboundSchema,
    region: z.string(),
    bucket: z.string(),
    accessKeyId: z.string(),
    secretAccessKey: z.string(),
    prefix: z.string().optional(),
    skipOnFail: z.boolean().default(false),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AmazonS3Sink$ {
    /** @deprecated use `AmazonS3Sink$inboundSchema` instead. */
    export const inboundSchema = AmazonS3Sink$inboundSchema;
    /** @deprecated use `AmazonS3Sink$outboundSchema` instead. */
    export const outboundSchema = AmazonS3Sink$outboundSchema;
    /** @deprecated use `AmazonS3Sink$Outbound` instead. */
    export type Outbound = AmazonS3Sink$Outbound;
}
