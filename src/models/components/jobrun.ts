/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export enum JobRunStatus {
    Failed = "FAILED",
    Completed = "COMPLETED",
    Pending = "PENDING",
    Terminated = "TERMINATED",
    Paused = "PAUSED",
}

export enum JobRunType {
    Manual = "MANUAL",
    Scheduled = "SCHEDULED",
}

export type JobRun = {
    id?: string | undefined;
    projectId?: string | undefined;
    jobId?: string | undefined;
    startTime?: Date | undefined;
    status?: JobRunStatus | undefined;
    summary?: { [k: string]: any } | undefined;
    type?: JobRunType | undefined;
    workspaceId?: string | undefined;
};

/** @internal */
export namespace JobRunStatus$ {
    export const inboundSchema = z.nativeEnum(JobRunStatus);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace JobRunType$ {
    export const inboundSchema = z.nativeEnum(JobRunType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace JobRun$ {
    export const inboundSchema: z.ZodType<JobRun, z.ZodTypeDef, unknown> = z
        .object({
            id: z.string().optional(),
            projectId: z.string().optional(),
            jobId: z.string().optional(),
            start_time: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            status: JobRunStatus$.inboundSchema.optional(),
            summary: z.record(z.any()).optional(),
            type: JobRunType$.inboundSchema.optional(),
            workspace_id: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.projectId === undefined ? null : { projectId: v.projectId }),
                ...(v.jobId === undefined ? null : { jobId: v.jobId }),
                ...(v.start_time === undefined ? null : { startTime: v.start_time }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.summary === undefined ? null : { summary: v.summary }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.workspace_id === undefined ? null : { workspaceId: v.workspace_id }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        projectId?: string | undefined;
        jobId?: string | undefined;
        start_time?: string | undefined;
        status?: string | undefined;
        summary?: { [k: string]: any } | undefined;
        type?: string | undefined;
        workspace_id?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, JobRun> = z
        .object({
            id: z.string().optional(),
            projectId: z.string().optional(),
            jobId: z.string().optional(),
            startTime: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            status: JobRunStatus$.outboundSchema.optional(),
            summary: z.record(z.any()).optional(),
            type: JobRunType$.outboundSchema.optional(),
            workspaceId: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.projectId === undefined ? null : { projectId: v.projectId }),
                ...(v.jobId === undefined ? null : { jobId: v.jobId }),
                ...(v.startTime === undefined ? null : { start_time: v.startTime }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.summary === undefined ? null : { summary: v.summary }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.workspaceId === undefined ? null : { workspace_id: v.workspaceId }),
            };
        });
}
