/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as z from "zod";

/**
 * The status of the job run.
 */
export enum JobRunStatus {
    Failed = "FAILED",
    Completed = "COMPLETED",
    Pending = "PENDING",
    Terminated = "TERMINATED",
    Paused = "PAUSED",
}

/**
 * A summary of the job run. Contains how many payloads are pending, how many finished executing, succeeded and failed.
 */
export type Summary = {
    /**
     * The total amount of payloads that finished execution, regardless of their status.
     */
    apisCount: number;
    /**
     * The amount of payloads that finished execution with a success status.
     */
    successCount: number;
    /**
     * The amount of payloads that finished execution with a failure status.
     */
    failuresCount: number;
    /**
     * The amount of payloads that have started execution but did not finish yet.
     */
    pendingCount?: number | undefined;
};

/**
 * Whether the job run was triggered manually or by the job schedule.
 */
export enum JobRunType {
    Manual = "MANUAL",
    Scheduled = "SCHEDULED",
}

/**
 * The details of a job run.
 */
export type JobRun = {
    /**
     * The job run ID.
     */
    id: string;
    /**
     * The project ID of the job.
     */
    projectId: string;
    /**
     * The ID of the job.
     */
    jobId: string;
    /**
     * The timestamp when the job run started executing.
     */
    startTime: Date;
    /**
     * The status of the job run.
     */
    status: JobRunStatus;
    /**
     * A summary of the job run. Contains how many payloads are pending, how many finished executing, succeeded and failed.
     */
    summary?: Summary | undefined;
    /**
     * Whether the job run was triggered manually or by the job schedule.
     */
    type: JobRunType;
    /**
     * The workspace ID of the project of the job.
     */
    workspaceId: string;
};

/** @internal */
export namespace JobRunStatus$ {
    export const inboundSchema = z.nativeEnum(JobRunStatus);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace Summary$ {
    export const inboundSchema: z.ZodType<Summary, z.ZodTypeDef, unknown> = z
        .object({
            apis_count: z.number(),
            success_count: z.number(),
            failures_count: z.number(),
            pending_count: z.number().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                apis_count: "apisCount",
                success_count: "successCount",
                failures_count: "failuresCount",
                pending_count: "pendingCount",
            });
        });

    export type Outbound = {
        apis_count: number;
        success_count: number;
        failures_count: number;
        pending_count?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Summary> = z
        .object({
            apisCount: z.number(),
            successCount: z.number(),
            failuresCount: z.number(),
            pendingCount: z.number().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                apisCount: "apis_count",
                successCount: "success_count",
                failuresCount: "failures_count",
                pendingCount: "pending_count",
            });
        });
}

/** @internal */
export namespace JobRunType$ {
    export const inboundSchema = z.nativeEnum(JobRunType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace JobRun$ {
    export const inboundSchema: z.ZodType<JobRun, z.ZodTypeDef, unknown> = z
        .object({
            id: z.string(),
            projectId: z.string(),
            jobId: z.string(),
            start_time: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
            status: JobRunStatus$.inboundSchema,
            summary: z.lazy(() => Summary$.inboundSchema).optional(),
            type: JobRunType$.inboundSchema,
            workspace_id: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                start_time: "startTime",
                workspace_id: "workspaceId",
            });
        });

    export type Outbound = {
        id: string;
        projectId: string;
        jobId: string;
        start_time: string;
        status: string;
        summary?: Summary$.Outbound | undefined;
        type: string;
        workspace_id: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, JobRun> = z
        .object({
            id: z.string(),
            projectId: z.string(),
            jobId: z.string(),
            startTime: z.date().transform((v) => v.toISOString()),
            status: JobRunStatus$.outboundSchema,
            summary: z.lazy(() => Summary$.outboundSchema).optional(),
            type: JobRunType$.outboundSchema,
            workspaceId: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                startTime: "start_time",
                workspaceId: "workspace_id",
            });
        });
}
