/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Configuration, Configuration$ } from "./configuration";
import { Payload, Payload$ } from "./payload";
import { Schedule, Schedule$ } from "./schedule";
import { Sink, Sink$ } from "./sink";
import * as z from "zod";

export type JobIdentity = {
    id?: string | undefined;
};

export enum JobProxy {
    UsWa = "US-WA",
    UsTx = "US-TX",
    UsFl = "US-FL",
    UsCa = "US-CA",
}

export type State = {
    status?: string | undefined;
};

export type Job = {
    id: string;
    configuration: Configuration;
    sink: Sink;
    payload: Array<Payload>;
    schedule?: Schedule | undefined;
    identity?: JobIdentity | undefined;
    proxy?: JobProxy | undefined;
    createdAt?: Date | undefined;
    nextRunTime?: Date | null | undefined;
    lastRunTime?: Date | undefined;
    state?: State | undefined;
    memo?: { [k: string]: any } | undefined;
    integrationId: string;
};

/** @internal */
export namespace JobIdentity$ {
    export const inboundSchema: z.ZodType<JobIdentity, z.ZodTypeDef, unknown> = z
        .object({
            id: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, JobIdentity> = z
        .object({
            id: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
            };
        });
}

/** @internal */
export namespace JobProxy$ {
    export const inboundSchema = z.nativeEnum(JobProxy);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace State$ {
    export const inboundSchema: z.ZodType<State, z.ZodTypeDef, unknown> = z
        .object({
            status: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.status === undefined ? null : { status: v.status }),
            };
        });

    export type Outbound = {
        status?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, State> = z
        .object({
            status: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.status === undefined ? null : { status: v.status }),
            };
        });
}

/** @internal */
export namespace Job$ {
    export const inboundSchema: z.ZodType<Job, z.ZodTypeDef, unknown> = z
        .object({
            id: z.string(),
            configuration: Configuration$.inboundSchema,
            sink: Sink$.inboundSchema,
            payload: z.array(Payload$.inboundSchema),
            schedule: Schedule$.inboundSchema.optional(),
            identity: z.lazy(() => JobIdentity$.inboundSchema).optional(),
            proxy: JobProxy$.inboundSchema.optional(),
            created_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            next_run_time: z
                .nullable(
                    z
                        .string()
                        .datetime({ offset: true })
                        .transform((v) => new Date(v))
                )
                .optional(),
            last_run_time: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            state: z.lazy(() => State$.inboundSchema).optional(),
            memo: z.record(z.any()).optional(),
            integration_id: z.string(),
        })
        .transform((v) => {
            return {
                id: v.id,
                configuration: v.configuration,
                sink: v.sink,
                payload: v.payload,
                ...(v.schedule === undefined ? null : { schedule: v.schedule }),
                ...(v.identity === undefined ? null : { identity: v.identity }),
                ...(v.proxy === undefined ? null : { proxy: v.proxy }),
                ...(v.created_at === undefined ? null : { createdAt: v.created_at }),
                ...(v.next_run_time === undefined ? null : { nextRunTime: v.next_run_time }),
                ...(v.last_run_time === undefined ? null : { lastRunTime: v.last_run_time }),
                ...(v.state === undefined ? null : { state: v.state }),
                ...(v.memo === undefined ? null : { memo: v.memo }),
                integrationId: v.integration_id,
            };
        });

    export type Outbound = {
        id: string;
        configuration: Configuration$.Outbound;
        sink: Sink$.Outbound;
        payload: Array<Payload$.Outbound>;
        schedule?: Schedule$.Outbound | undefined;
        identity?: JobIdentity$.Outbound | undefined;
        proxy?: string | undefined;
        created_at?: string | undefined;
        next_run_time?: string | null | undefined;
        last_run_time?: string | undefined;
        state?: State$.Outbound | undefined;
        memo?: { [k: string]: any } | undefined;
        integration_id: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Job> = z
        .object({
            id: z.string(),
            configuration: Configuration$.outboundSchema,
            sink: Sink$.outboundSchema,
            payload: z.array(Payload$.outboundSchema),
            schedule: Schedule$.outboundSchema.optional(),
            identity: z.lazy(() => JobIdentity$.outboundSchema).optional(),
            proxy: JobProxy$.outboundSchema.optional(),
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            nextRunTime: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
            lastRunTime: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            state: z.lazy(() => State$.outboundSchema).optional(),
            memo: z.record(z.any()).optional(),
            integrationId: z.string(),
        })
        .transform((v) => {
            return {
                id: v.id,
                configuration: v.configuration,
                sink: v.sink,
                payload: v.payload,
                ...(v.schedule === undefined ? null : { schedule: v.schedule }),
                ...(v.identity === undefined ? null : { identity: v.identity }),
                ...(v.proxy === undefined ? null : { proxy: v.proxy }),
                ...(v.createdAt === undefined ? null : { created_at: v.createdAt }),
                ...(v.nextRunTime === undefined ? null : { next_run_time: v.nextRunTime }),
                ...(v.lastRunTime === undefined ? null : { last_run_time: v.lastRunTime }),
                ...(v.state === undefined ? null : { state: v.state }),
                ...(v.memo === undefined ? null : { memo: v.memo }),
                integration_id: v.integrationId,
            };
        });
}
