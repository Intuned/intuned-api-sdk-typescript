/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import {
    AuthSession,
    AuthSession$inboundSchema,
    AuthSession$Outbound,
    AuthSession$outboundSchema,
} from "./authsession.js";
import {
    JobConfigurationResponse,
    JobConfigurationResponse$inboundSchema,
    JobConfigurationResponse$Outbound,
    JobConfigurationResponse$outboundSchema,
} from "./jobconfigurationresponse.js";
import {
    JobPayload,
    JobPayload$inboundSchema,
    JobPayload$Outbound,
    JobPayload$outboundSchema,
} from "./jobpayload.js";
import {
    JobSchedule,
    JobSchedule$inboundSchema,
    JobSchedule$Outbound,
    JobSchedule$outboundSchema,
} from "./jobschedule.js";
import {
    JobSink,
    JobSink$inboundSchema,
    JobSink$Outbound,
    JobSink$outboundSchema,
} from "./jobsink.js";
import * as z from "zod";

export const JobStateStatus = {
    Paused: "PAUSED",
} as const;
export type JobStateStatus = ClosedEnum<typeof JobStateStatus>;

export type Paused = {
    status?: JobStateStatus | undefined;
    /**
     * The reason the job is paused
     */
    reason?: string | undefined;
};

export const StateStatus = {
    Active: "ACTIVE",
} as const;
export type StateStatus = ClosedEnum<typeof StateStatus>;

export type Active = {
    status?: StateStatus | undefined;
};

export type State = Active | Paused;

/**
 * Job properties and configurations
 */
export type Job = {
    /**
     * The ID of the job. Has to be a valid URL slug.
     */
    id: string;
    /**
     * A sink to send the results to. Can be a webhook or Amazon S3 bucket.
     */
    sink?: JobSink | null | undefined;
    /**
     * A list of the initial payloads of the job.
     */
    payload: Array<JobPayload>;
    /**
     * Schedule configurations for the job. If set, the job will periodically run according to this configuration. The configurations are used to calculate the closest next run time.
     */
    schedule?: JobSchedule | undefined;
    /**
     * Auth session configurations
     */
    authSession?: AuthSession | undefined;
    /**
     * The configuration of the job. Configures the retry policy and maximum concurrent requests.
     */
    configuration: JobConfigurationResponse;
    /**
     * The timestamp of when the job was created.
     */
    createdAt?: Date | undefined;
    /**
     * The timestamp of the next scheduled job run. `null` if the job does not have a schedule.
     */
    nextRunTime: Date | null;
    /**
     * The timestamp of the last time the job ran. `null` if the job has not run yet.
     */
    lastRunTime: Date | null;
    state: Active | Paused;
    /**
     * The project ID of the job
     */
    projectId: string;
};

/** @internal */
export const JobStateStatus$inboundSchema: z.ZodNativeEnum<typeof JobStateStatus> =
    z.nativeEnum(JobStateStatus);

/** @internal */
export const JobStateStatus$outboundSchema: z.ZodNativeEnum<typeof JobStateStatus> =
    JobStateStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JobStateStatus$ {
    /** @deprecated use `JobStateStatus$inboundSchema` instead. */
    export const inboundSchema = JobStateStatus$inboundSchema;
    /** @deprecated use `JobStateStatus$outboundSchema` instead. */
    export const outboundSchema = JobStateStatus$outboundSchema;
}

/** @internal */
export const Paused$inboundSchema: z.ZodType<Paused, z.ZodTypeDef, unknown> = z.object({
    status: JobStateStatus$inboundSchema.optional(),
    reason: z.string().optional(),
});

/** @internal */
export type Paused$Outbound = {
    status?: string | undefined;
    reason?: string | undefined;
};

/** @internal */
export const Paused$outboundSchema: z.ZodType<Paused$Outbound, z.ZodTypeDef, Paused> = z.object({
    status: JobStateStatus$outboundSchema.optional(),
    reason: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Paused$ {
    /** @deprecated use `Paused$inboundSchema` instead. */
    export const inboundSchema = Paused$inboundSchema;
    /** @deprecated use `Paused$outboundSchema` instead. */
    export const outboundSchema = Paused$outboundSchema;
    /** @deprecated use `Paused$Outbound` instead. */
    export type Outbound = Paused$Outbound;
}

/** @internal */
export const StateStatus$inboundSchema: z.ZodNativeEnum<typeof StateStatus> =
    z.nativeEnum(StateStatus);

/** @internal */
export const StateStatus$outboundSchema: z.ZodNativeEnum<typeof StateStatus> =
    StateStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StateStatus$ {
    /** @deprecated use `StateStatus$inboundSchema` instead. */
    export const inboundSchema = StateStatus$inboundSchema;
    /** @deprecated use `StateStatus$outboundSchema` instead. */
    export const outboundSchema = StateStatus$outboundSchema;
}

/** @internal */
export const Active$inboundSchema: z.ZodType<Active, z.ZodTypeDef, unknown> = z.object({
    status: StateStatus$inboundSchema.optional(),
});

/** @internal */
export type Active$Outbound = {
    status?: string | undefined;
};

/** @internal */
export const Active$outboundSchema: z.ZodType<Active$Outbound, z.ZodTypeDef, Active> = z.object({
    status: StateStatus$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Active$ {
    /** @deprecated use `Active$inboundSchema` instead. */
    export const inboundSchema = Active$inboundSchema;
    /** @deprecated use `Active$outboundSchema` instead. */
    export const outboundSchema = Active$outboundSchema;
    /** @deprecated use `Active$Outbound` instead. */
    export type Outbound = Active$Outbound;
}

/** @internal */
export const State$inboundSchema: z.ZodType<State, z.ZodTypeDef, unknown> = z.union([
    z.lazy(() => Active$inboundSchema),
    z.lazy(() => Paused$inboundSchema),
]);

/** @internal */
export type State$Outbound = Active$Outbound | Paused$Outbound;

/** @internal */
export const State$outboundSchema: z.ZodType<State$Outbound, z.ZodTypeDef, State> = z.union([
    z.lazy(() => Active$outboundSchema),
    z.lazy(() => Paused$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace State$ {
    /** @deprecated use `State$inboundSchema` instead. */
    export const inboundSchema = State$inboundSchema;
    /** @deprecated use `State$outboundSchema` instead. */
    export const outboundSchema = State$outboundSchema;
    /** @deprecated use `State$Outbound` instead. */
    export type Outbound = State$Outbound;
}

/** @internal */
export const Job$inboundSchema: z.ZodType<Job, z.ZodTypeDef, unknown> = z
    .object({
        id: z.string(),
        sink: z.nullable(JobSink$inboundSchema).optional(),
        payload: z.array(JobPayload$inboundSchema),
        schedule: JobSchedule$inboundSchema.optional(),
        authSession: AuthSession$inboundSchema.optional(),
        configuration: JobConfigurationResponse$inboundSchema,
        created_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        next_run_time: z.nullable(
            z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
        ),
        last_run_time: z.nullable(
            z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
        ),
        state: z.union([z.lazy(() => Active$inboundSchema), z.lazy(() => Paused$inboundSchema)]),
        projectId: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            created_at: "createdAt",
            next_run_time: "nextRunTime",
            last_run_time: "lastRunTime",
        });
    });

/** @internal */
export type Job$Outbound = {
    id: string;
    sink?: JobSink$Outbound | null | undefined;
    payload: Array<JobPayload$Outbound>;
    schedule?: JobSchedule$Outbound | undefined;
    authSession?: AuthSession$Outbound | undefined;
    configuration: JobConfigurationResponse$Outbound;
    created_at?: string | undefined;
    next_run_time: string | null;
    last_run_time: string | null;
    state: Active$Outbound | Paused$Outbound;
    projectId: string;
};

/** @internal */
export const Job$outboundSchema: z.ZodType<Job$Outbound, z.ZodTypeDef, Job> = z
    .object({
        id: z.string(),
        sink: z.nullable(JobSink$outboundSchema).optional(),
        payload: z.array(JobPayload$outboundSchema),
        schedule: JobSchedule$outboundSchema.optional(),
        authSession: AuthSession$outboundSchema.optional(),
        configuration: JobConfigurationResponse$outboundSchema,
        createdAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        nextRunTime: z.nullable(z.date().transform((v) => v.toISOString())),
        lastRunTime: z.nullable(z.date().transform((v) => v.toISOString())),
        state: z.union([z.lazy(() => Active$outboundSchema), z.lazy(() => Paused$outboundSchema)]),
        projectId: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            createdAt: "created_at",
            nextRunTime: "next_run_time",
            lastRunTime: "last_run_time",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Job$ {
    /** @deprecated use `Job$inboundSchema` instead. */
    export const inboundSchema = Job$inboundSchema;
    /** @deprecated use `Job$outboundSchema` instead. */
    export const outboundSchema = Job$outboundSchema;
    /** @deprecated use `Job$Outbound` instead. */
    export type Outbound = Job$Outbound;
}
