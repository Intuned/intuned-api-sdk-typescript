/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import {
  AsyncFilePendingResponse,
  AsyncFilePendingResponse$inboundSchema,
  AsyncFilePendingResponse$Outbound,
  AsyncFilePendingResponse$outboundSchema,
} from "./asyncfilependingresponse.js";
import {
  FileFailedResponse,
  FileFailedResponse$inboundSchema,
  FileFailedResponse$Outbound,
  FileFailedResponse$outboundSchema,
} from "./filefailedresponse.js";
import {
  MarkdownExtractionSuccessfulResponse,
  MarkdownExtractionSuccessfulResponse$inboundSchema,
  MarkdownExtractionSuccessfulResponse$Outbound,
  MarkdownExtractionSuccessfulResponse$outboundSchema,
} from "./markdownextractionsuccessfulresponse.js";

export type MarkdownExtractionAsyncResponse =
  | (AsyncFilePendingResponse & { status: "pending" })
  | (MarkdownExtractionSuccessfulResponse & { status: "completed" })
  | (FileFailedResponse & { status: "failed" });

/** @internal */
export const MarkdownExtractionAsyncResponse$inboundSchema: z.ZodType<
  MarkdownExtractionAsyncResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  AsyncFilePendingResponse$inboundSchema.and(
    z.object({ status: z.literal("pending") }).transform((v) => ({
      status: v.status,
    })),
  ),
  MarkdownExtractionSuccessfulResponse$inboundSchema.and(
    z.object({ status: z.literal("completed") }).transform((v) => ({
      status: v.status,
    })),
  ),
  FileFailedResponse$inboundSchema.and(
    z.object({ status: z.literal("failed") }).transform((v) => ({
      status: v.status,
    })),
  ),
]);

/** @internal */
export type MarkdownExtractionAsyncResponse$Outbound =
  | (AsyncFilePendingResponse$Outbound & { status: "pending" })
  | (MarkdownExtractionSuccessfulResponse$Outbound & { status: "completed" })
  | (FileFailedResponse$Outbound & { status: "failed" });

/** @internal */
export const MarkdownExtractionAsyncResponse$outboundSchema: z.ZodType<
  MarkdownExtractionAsyncResponse$Outbound,
  z.ZodTypeDef,
  MarkdownExtractionAsyncResponse
> = z.union([
  AsyncFilePendingResponse$outboundSchema.and(
    z.object({ status: z.literal("pending") }).transform((v) => ({
      status: v.status,
    })),
  ),
  MarkdownExtractionSuccessfulResponse$outboundSchema.and(
    z.object({ status: z.literal("completed") }).transform((v) => ({
      status: v.status,
    })),
  ),
  FileFailedResponse$outboundSchema.and(
    z.object({ status: z.literal("failed") }).transform((v) => ({
      status: v.status,
    })),
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MarkdownExtractionAsyncResponse$ {
  /** @deprecated use `MarkdownExtractionAsyncResponse$inboundSchema` instead. */
  export const inboundSchema = MarkdownExtractionAsyncResponse$inboundSchema;
  /** @deprecated use `MarkdownExtractionAsyncResponse$outboundSchema` instead. */
  export const outboundSchema = MarkdownExtractionAsyncResponse$outboundSchema;
  /** @deprecated use `MarkdownExtractionAsyncResponse$Outbound` instead. */
  export type Outbound = MarkdownExtractionAsyncResponse$Outbound;
}
