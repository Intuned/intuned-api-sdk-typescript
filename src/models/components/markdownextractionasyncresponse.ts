/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
    AsyncFailedResponse,
    AsyncFailedResponse$,
    AsyncFailedResponseStatus,
} from "./asyncfailedresponse";
import {
    AsyncFilePendingResponse,
    AsyncFilePendingResponse$,
    Status,
} from "./asyncfilependingresponse";
import {
    MarkdownExtractionAsyncSuccessfulResponse,
    MarkdownExtractionAsyncSuccessfulResponse$,
    MarkdownExtractionAsyncSuccessfulResponseStatus,
} from "./markdownextractionasyncsuccessfulresponse";
import * as z from "zod";

export type MarkdownExtractionAsyncResponse =
    | (AsyncFilePendingResponse & { status: Status.Pending })
    | (MarkdownExtractionAsyncSuccessfulResponse & {
          status: MarkdownExtractionAsyncSuccessfulResponseStatus.Completed;
      })
    | (AsyncFailedResponse & { status: AsyncFailedResponseStatus.Failed });

/** @internal */
export namespace MarkdownExtractionAsyncResponse$ {
    export const inboundSchema: z.ZodType<MarkdownExtractionAsyncResponse, z.ZodTypeDef, unknown> =
        z.union([
            AsyncFilePendingResponse$.inboundSchema.and(
                z
                    .object({ status: z.literal(Status.Pending) })
                    .transform((v) => ({ status: v.status }))
            ),
            MarkdownExtractionAsyncSuccessfulResponse$.inboundSchema.and(
                z
                    .object({
                        status: z.literal(
                            MarkdownExtractionAsyncSuccessfulResponseStatus.Completed
                        ),
                    })
                    .transform((v) => ({ status: v.status }))
            ),
            AsyncFailedResponse$.inboundSchema.and(
                z
                    .object({ status: z.literal(AsyncFailedResponseStatus.Failed) })
                    .transform((v) => ({ status: v.status }))
            ),
        ]);

    export type Outbound =
        | (AsyncFilePendingResponse$.Outbound & { status: Status.Pending })
        | (MarkdownExtractionAsyncSuccessfulResponse$.Outbound & {
              status: MarkdownExtractionAsyncSuccessfulResponseStatus.Completed;
          })
        | (AsyncFailedResponse$.Outbound & { status: AsyncFailedResponseStatus.Failed });
    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        MarkdownExtractionAsyncResponse
    > = z.union([
        AsyncFilePendingResponse$.outboundSchema.and(
            z.object({ status: z.literal(Status.Pending) }).transform((v) => ({ status: v.status }))
        ),
        MarkdownExtractionAsyncSuccessfulResponse$.outboundSchema.and(
            z
                .object({
                    status: z.literal(MarkdownExtractionAsyncSuccessfulResponseStatus.Completed),
                })
                .transform((v) => ({ status: v.status }))
        ),
        AsyncFailedResponse$.outboundSchema.and(
            z
                .object({ status: z.literal(AsyncFailedResponseStatus.Failed) })
                .transform((v) => ({ status: v.status }))
        ),
    ]);
}
