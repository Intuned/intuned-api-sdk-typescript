/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { FileFailedResponse, FileFailedResponse$ } from "./filefailedresponse.js";
import {
    StructuredDataExtractionFileSuccessfulResponse,
    StructuredDataExtractionFileSuccessfulResponse$,
} from "./structureddataextractionfilesuccessfulresponse.js";
import * as z from "zod";

export type StructuredDataExtractionSyncResponse =
    | (StructuredDataExtractionFileSuccessfulResponse & { status: "completed" })
    | (FileFailedResponse & { status: "failed" });

/** @internal */
export namespace StructuredDataExtractionSyncResponse$ {
    export const inboundSchema: z.ZodType<
        StructuredDataExtractionSyncResponse,
        z.ZodTypeDef,
        unknown
    > = z.union([
        StructuredDataExtractionFileSuccessfulResponse$.inboundSchema.and(
            z.object({ status: z.literal("completed") }).transform((v) => ({ status: v.status }))
        ),
        FileFailedResponse$.inboundSchema.and(
            z.object({ status: z.literal("failed") }).transform((v) => ({ status: v.status }))
        ),
    ]);

    export type Outbound =
        | (StructuredDataExtractionFileSuccessfulResponse$.Outbound & { status: "completed" })
        | (FileFailedResponse$.Outbound & { status: "failed" });
    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        StructuredDataExtractionSyncResponse
    > = z.union([
        StructuredDataExtractionFileSuccessfulResponse$.outboundSchema.and(
            z.object({ status: z.literal("completed") }).transform((v) => ({ status: v.status }))
        ),
        FileFailedResponse$.outboundSchema.and(
            z.object({ status: z.literal("failed") }).transform((v) => ({ status: v.status }))
        ),
    ]);
}
