/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export enum AuthSessionCreateDoneResultStatus {
    Done = "done",
}

export type AuthSessionCreateDoneResult = {
    status: AuthSessionCreateDoneResultStatus;
    authSessionId: string;
};

/** @internal */
export namespace AuthSessionCreateDoneResultStatus$ {
    export const inboundSchema = z.nativeEnum(AuthSessionCreateDoneResultStatus);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace AuthSessionCreateDoneResult$ {
    export const inboundSchema: z.ZodType<AuthSessionCreateDoneResult, z.ZodTypeDef, unknown> = z
        .object({
            status: AuthSessionCreateDoneResultStatus$.inboundSchema,
            authSessionId: z.string(),
        })
        .transform((v) => {
            return {
                status: v.status,
                authSessionId: v.authSessionId,
            };
        });

    export type Outbound = {
        status: string;
        authSessionId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AuthSessionCreateDoneResult> = z
        .object({
            status: AuthSessionCreateDoneResultStatus$.outboundSchema,
            authSessionId: z.string(),
        })
        .transform((v) => {
            return {
                status: v.status,
                authSessionId: v.authSessionId,
            };
        });
}
