/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { APIParameters, APIParameters$ } from "./apiparameters.js";
import { AuthSession, AuthSession$ } from "./authsession.js";
import { Retry, Retry$ } from "./retry.js";
import * as z from "zod";

/**
 * Details of a repeatable item.
 */
export type QueueRepeatItem = {
    /**
     * The name of the API to be executed. This is the file path relative to the `api` folder inside your project.
     */
    apiName: string;
    /**
     * The parameters to be passed to the API.
     */
    parameters?: APIParameters | undefined;
    /**
     * Retry policy configurations
     */
    retry?: Retry | undefined;
    /**
     * Auth session configurations
     */
    authSession?: AuthSession | undefined;
    /**
     * Repeat period, minimum of 10 minutes. On every period, this item will be appended to the queue.
     */
    repeat: string;
    /**
     * The ID of the repeatable item.
     */
    id: string;
    /**
     * The run ID of the last time this repeatable item executed.
     */
    lastRunId?: string | undefined;
};

/** @internal */
export namespace QueueRepeatItem$ {
    export const inboundSchema: z.ZodType<QueueRepeatItem, z.ZodTypeDef, unknown> = z.object({
        apiName: z.string(),
        parameters: APIParameters$.inboundSchema.optional(),
        retry: Retry$.inboundSchema.optional(),
        authSession: AuthSession$.inboundSchema.optional(),
        repeat: z.string(),
        id: z.string(),
        lastRunId: z.string().optional(),
    });

    export type Outbound = {
        apiName: string;
        parameters?: APIParameters$.Outbound | undefined;
        retry?: Retry$.Outbound | undefined;
        authSession?: AuthSession$.Outbound | undefined;
        repeat: string;
        id: string;
        lastRunId?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, QueueRepeatItem> = z.object({
        apiName: z.string(),
        parameters: APIParameters$.outboundSchema.optional(),
        retry: Retry$.outboundSchema.optional(),
        authSession: AuthSession$.outboundSchema.optional(),
        repeat: z.string(),
        id: z.string(),
        lastRunId: z.string().optional(),
    });
}
