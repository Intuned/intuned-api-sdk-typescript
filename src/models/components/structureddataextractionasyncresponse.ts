/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { AsyncFailedResponse, AsyncFailedResponse$ } from "./asyncfailedresponse";
import { AsyncFilePendingResponse, AsyncFilePendingResponse$ } from "./asyncfilependingresponse";
import * as z from "zod";

/**
 * Operation status.
 */
export enum StructuredDataExtractionAsyncResponseStatus {
    Completed = "completed",
}

export type StructuredDataExtractionAsyncResponse1 = {
    /**
     * result json object with extracted data.
     */
    result?: { [k: string]: any } | undefined;
    /**
     * Operation ID
     */
    operationId?: string | undefined;
    /**
     * Operation status.
     */
    status?: StructuredDataExtractionAsyncResponseStatus | undefined;
    /**
     * HTTP status code of the operation.
     */
    statusCode?: number | undefined;
};

export type StructuredDataExtractionAsyncResponse =
    | AsyncFilePendingResponse
    | StructuredDataExtractionAsyncResponse1
    | AsyncFailedResponse;

/** @internal */
export namespace StructuredDataExtractionAsyncResponseStatus$ {
    export const inboundSchema = z.nativeEnum(StructuredDataExtractionAsyncResponseStatus);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace StructuredDataExtractionAsyncResponse1$ {
    export const inboundSchema: z.ZodType<
        StructuredDataExtractionAsyncResponse1,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            result: z.record(z.any()).optional(),
            operationId: z.string().optional(),
            status: StructuredDataExtractionAsyncResponseStatus$.inboundSchema.optional(),
            statusCode: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.result === undefined ? null : { result: v.result }),
                ...(v.operationId === undefined ? null : { operationId: v.operationId }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.statusCode === undefined ? null : { statusCode: v.statusCode }),
            };
        });

    export type Outbound = {
        result?: { [k: string]: any } | undefined;
        operationId?: string | undefined;
        status?: string | undefined;
        statusCode?: number | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        StructuredDataExtractionAsyncResponse1
    > = z
        .object({
            result: z.record(z.any()).optional(),
            operationId: z.string().optional(),
            status: StructuredDataExtractionAsyncResponseStatus$.outboundSchema.optional(),
            statusCode: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.result === undefined ? null : { result: v.result }),
                ...(v.operationId === undefined ? null : { operationId: v.operationId }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.statusCode === undefined ? null : { statusCode: v.statusCode }),
            };
        });
}

/** @internal */
export namespace StructuredDataExtractionAsyncResponse$ {
    export const inboundSchema: z.ZodType<
        StructuredDataExtractionAsyncResponse,
        z.ZodTypeDef,
        unknown
    > = z.union([
        AsyncFilePendingResponse$.inboundSchema,
        z.lazy(() => StructuredDataExtractionAsyncResponse1$.inboundSchema),
        AsyncFailedResponse$.inboundSchema,
    ]);

    export type Outbound =
        | AsyncFilePendingResponse$.Outbound
        | StructuredDataExtractionAsyncResponse1$.Outbound
        | AsyncFailedResponse$.Outbound;
    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        StructuredDataExtractionAsyncResponse
    > = z.union([
        AsyncFilePendingResponse$.outboundSchema,
        z.lazy(() => StructuredDataExtractionAsyncResponse1$.outboundSchema),
        AsyncFailedResponse$.outboundSchema,
    ]);
}
