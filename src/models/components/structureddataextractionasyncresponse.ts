/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { AsyncFailedResponse, AsyncFailedResponse$ } from "./asyncfailedresponse.js";
import { AsyncFilePendingResponse, AsyncFilePendingResponse$ } from "./asyncfilependingresponse.js";
import {
    StructuredDataExtractionAsyncSuccessfulResponse,
    StructuredDataExtractionAsyncSuccessfulResponse$,
} from "./structureddataextractionasyncsuccessfulresponse.js";
import * as z from "zod";

export type StructuredDataExtractionAsyncResponse =
    | (AsyncFilePendingResponse & { status: "pending" })
    | (StructuredDataExtractionAsyncSuccessfulResponse & { status: "completed" })
    | (AsyncFailedResponse & { status: "failed" });

/** @internal */
export namespace StructuredDataExtractionAsyncResponse$ {
    export const inboundSchema: z.ZodType<
        StructuredDataExtractionAsyncResponse,
        z.ZodTypeDef,
        unknown
    > = z.union([
        AsyncFilePendingResponse$.inboundSchema.and(
            z.object({ status: z.literal("pending") }).transform((v) => ({ status: v.status }))
        ),
        StructuredDataExtractionAsyncSuccessfulResponse$.inboundSchema.and(
            z.object({ status: z.literal("completed") }).transform((v) => ({ status: v.status }))
        ),
        AsyncFailedResponse$.inboundSchema.and(
            z.object({ status: z.literal("failed") }).transform((v) => ({ status: v.status }))
        ),
    ]);

    export type Outbound =
        | (AsyncFilePendingResponse$.Outbound & { status: "pending" })
        | (StructuredDataExtractionAsyncSuccessfulResponse$.Outbound & { status: "completed" })
        | (AsyncFailedResponse$.Outbound & { status: "failed" });
    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        StructuredDataExtractionAsyncResponse
    > = z.union([
        AsyncFilePendingResponse$.outboundSchema.and(
            z.object({ status: z.literal("pending") }).transform((v) => ({ status: v.status }))
        ),
        StructuredDataExtractionAsyncSuccessfulResponse$.outboundSchema.and(
            z.object({ status: z.literal("completed") }).transform((v) => ({ status: v.status }))
        ),
        AsyncFailedResponse$.outboundSchema.and(
            z.object({ status: z.literal("failed") }).transform((v) => ({ status: v.status }))
        ),
    ]);
}
