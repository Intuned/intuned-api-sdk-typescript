/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export enum RunMode {
    OrderIrrelevant = "Order-Irrelevant",
}

export type Retry = {
    backoffCoefficent?: number | undefined;
    initialInterval?: string | undefined;
    maximumInterval?: string | undefined;
};

export type Configuration = {
    runMode: RunMode;
    retry?: Retry | undefined;
    maxConcurrentRequests?: number | undefined;
};

/** @internal */
export namespace RunMode$ {
    export const inboundSchema = z.nativeEnum(RunMode);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace Retry$ {
    export const inboundSchema: z.ZodType<Retry, z.ZodTypeDef, unknown> = z
        .object({
            backoffCoefficent: z.number().default(1),
            initialInterval: z.string().default("1s"),
            maximumInterval: z.string().optional(),
        })
        .transform((v) => {
            return {
                backoffCoefficent: v.backoffCoefficent,
                initialInterval: v.initialInterval,
                ...(v.maximumInterval === undefined
                    ? null
                    : { maximumInterval: v.maximumInterval }),
            };
        });

    export type Outbound = {
        backoffCoefficent: number;
        initialInterval: string;
        maximumInterval?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Retry> = z
        .object({
            backoffCoefficent: z.number().default(1),
            initialInterval: z.string().default("1s"),
            maximumInterval: z.string().optional(),
        })
        .transform((v) => {
            return {
                backoffCoefficent: v.backoffCoefficent,
                initialInterval: v.initialInterval,
                ...(v.maximumInterval === undefined
                    ? null
                    : { maximumInterval: v.maximumInterval }),
            };
        });
}

/** @internal */
export namespace Configuration$ {
    export const inboundSchema: z.ZodType<Configuration, z.ZodTypeDef, unknown> = z
        .object({
            runMode: RunMode$.inboundSchema,
            retry: z.lazy(() => Retry$.inboundSchema).optional(),
            maxConcurrentRequests: z.number().optional(),
        })
        .transform((v) => {
            return {
                runMode: v.runMode,
                ...(v.retry === undefined ? null : { retry: v.retry }),
                ...(v.maxConcurrentRequests === undefined
                    ? null
                    : { maxConcurrentRequests: v.maxConcurrentRequests }),
            };
        });

    export type Outbound = {
        runMode: string;
        retry?: Retry$.Outbound | undefined;
        maxConcurrentRequests?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Configuration> = z
        .object({
            runMode: RunMode$.outboundSchema,
            retry: z.lazy(() => Retry$.outboundSchema).optional(),
            maxConcurrentRequests: z.number().optional(),
        })
        .transform((v) => {
            return {
                runMode: v.runMode,
                ...(v.retry === undefined ? null : { retry: v.retry }),
                ...(v.maxConcurrentRequests === undefined
                    ? null
                    : { maxConcurrentRequests: v.maxConcurrentRequests }),
            };
        });
}
