/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Interval, Interval$ } from "./interval";
import * as z from "zod";

export type Schedule = {
    version?: string | undefined;
    intervals?: Array<Interval> | undefined;
};

/** @internal */
export namespace Schedule$ {
    export const inboundSchema: z.ZodType<Schedule, z.ZodTypeDef, unknown> = z
        .object({
            version: z.string().optional(),
            intervals: z.array(Interval$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.version === undefined ? null : { version: v.version }),
                ...(v.intervals === undefined ? null : { intervals: v.intervals }),
            };
        });

    export type Outbound = {
        version?: string | undefined;
        intervals?: Array<Interval$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Schedule> = z
        .object({
            version: z.string().optional(),
            intervals: z.array(Interval$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.version === undefined ? null : { version: v.version }),
                ...(v.intervals === undefined ? null : { intervals: v.intervals }),
            };
        });
}
