/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { JobCalendarRange, JobCalendarRange$ } from "./jobcalendarrange";
import * as z from "zod";

export type JobCalendarValue2 = number | string;

export type JobCalendarValue = JobCalendarRange | any | number | string | Array<JobCalendarRange>;

/** @internal */
export namespace JobCalendarValue2$ {
    export const inboundSchema: z.ZodType<JobCalendarValue2, z.ZodTypeDef, unknown> = z.union([
        z.number(),
        z.string(),
    ]);

    export type Outbound = number | string;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, JobCalendarValue2> = z.union([
        z.number(),
        z.string(),
    ]);
}

/** @internal */
export namespace JobCalendarValue$ {
    export const inboundSchema: z.ZodType<JobCalendarValue, z.ZodTypeDef, unknown> = z.union([
        JobCalendarRange$.inboundSchema,
        z.any(),
        z.union([z.number(), z.string()]),
        z.array(JobCalendarRange$.inboundSchema),
    ]);

    export type Outbound =
        | JobCalendarRange$.Outbound
        | any
        | number
        | string
        | Array<JobCalendarRange$.Outbound>;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, JobCalendarValue> = z.union([
        JobCalendarRange$.outboundSchema,
        z.any(),
        z.union([z.number(), z.string()]),
        z.array(JobCalendarRange$.outboundSchema),
    ]);
}
