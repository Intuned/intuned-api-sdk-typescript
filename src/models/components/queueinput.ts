/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { AuthSession, AuthSession$ } from "./authsession";
import { QueueConfiguration, QueueConfiguration$ } from "./queueconfiguration";
import { QueueSink, QueueSink$ } from "./queuesink";
import * as z from "zod";

export type QueueInput = {
    /**
     * The queue ID. Has to be a valid URL slug.
     */
    id?: string | undefined;
    /**
     * The queue name.
     */
    name?: string | undefined;
    /**
     * The configuration of the queue. Confiugre retries, rate limits, execution schedules and waits between items.
     */
    configuration: QueueConfiguration;
    /**
     * Webhook sink configuration
     */
    sink?: QueueSink | undefined;
    /**
     * Auth session configurations
     */
    authSession?: AuthSession | undefined;
    /**
     * Additional metadata to associate with the queue. It does not affect the behaviour of the queue.
     */
    metadata?: { [k: string]: any } | undefined;
};

/** @internal */
export namespace QueueInput$ {
    export const inboundSchema: z.ZodType<QueueInput, z.ZodTypeDef, unknown> = z.object({
        id: z.string().optional(),
        name: z.string().optional(),
        configuration: QueueConfiguration$.inboundSchema,
        sink: QueueSink$.inboundSchema.optional(),
        authSession: AuthSession$.inboundSchema.optional(),
        metadata: z.record(z.any()).optional(),
    });

    export type Outbound = {
        id?: string | undefined;
        name?: string | undefined;
        configuration: QueueConfiguration$.Outbound;
        sink?: QueueSink$.Outbound | undefined;
        authSession?: AuthSession$.Outbound | undefined;
        metadata?: { [k: string]: any } | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, QueueInput> = z.object({
        id: z.string().optional(),
        name: z.string().optional(),
        configuration: QueueConfiguration$.outboundSchema,
        sink: QueueSink$.outboundSchema.optional(),
        authSession: AuthSession$.outboundSchema.optional(),
        metadata: z.record(z.any()).optional(),
    });
}
