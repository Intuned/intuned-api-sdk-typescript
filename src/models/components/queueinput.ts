/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Identity, Identity$ } from "./identity";
import { Proxy, Proxy$ } from "./proxy";
import { QueueConfiguration, QueueConfiguration$ } from "./queueconfiguration";
import { Sink, Sink$ } from "./sink";
import * as z from "zod";

export type QueueInput = {
    id?: string | undefined;
    name?: string | undefined;
    configuration: QueueConfiguration;
    sink?: Sink | undefined;
    identity?: Identity | undefined;
    proxy?: Proxy | undefined;
    metadata?: { [k: string]: any } | undefined;
};

/** @internal */
export namespace QueueInput$ {
    export const inboundSchema: z.ZodType<QueueInput, z.ZodTypeDef, unknown> = z
        .object({
            id: z.string().optional(),
            name: z.string().optional(),
            configuration: QueueConfiguration$.inboundSchema,
            sink: Sink$.inboundSchema.optional(),
            identity: Identity$.inboundSchema.optional(),
            proxy: Proxy$.inboundSchema.optional(),
            metadata: z.record(z.any()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                configuration: v.configuration,
                ...(v.sink === undefined ? null : { sink: v.sink }),
                ...(v.identity === undefined ? null : { identity: v.identity }),
                ...(v.proxy === undefined ? null : { proxy: v.proxy }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        name?: string | undefined;
        configuration: QueueConfiguration$.Outbound;
        sink?: Sink$.Outbound | undefined;
        identity?: Identity$.Outbound | undefined;
        proxy?: Proxy$.Outbound | undefined;
        metadata?: { [k: string]: any } | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, QueueInput> = z
        .object({
            id: z.string().optional(),
            name: z.string().optional(),
            configuration: QueueConfiguration$.outboundSchema,
            sink: Sink$.outboundSchema.optional(),
            identity: Identity$.outboundSchema.optional(),
            proxy: Proxy$.outboundSchema.optional(),
            metadata: z.record(z.any()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                configuration: v.configuration,
                ...(v.sink === undefined ? null : { sink: v.sink }),
                ...(v.identity === undefined ? null : { identity: v.identity }),
                ...(v.proxy === undefined ? null : { proxy: v.proxy }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
            };
        });
}
