/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { AuthSession, AuthSession$ } from "./authsession.js";
import { QueueConfiguration, QueueConfiguration$ } from "./queueconfiguration.js";
import { WebhookSink, WebhookSink$ } from "./webhooksink.js";
import * as z from "zod";

export type QueueInput = {
    /**
     * The queue ID. Has to be a valid URL slug.
     */
    id?: string | undefined;
    /**
     * The queue name.
     */
    name?: string | undefined;
    configuration: QueueConfiguration | null;
    sink?: WebhookSink | null | undefined;
    authSession?: AuthSession | null | undefined;
    metadata?: { [k: string]: any } | null | undefined;
};

/** @internal */
export namespace QueueInput$ {
    export const inboundSchema: z.ZodType<QueueInput, z.ZodTypeDef, unknown> = z.object({
        id: z.string().optional(),
        name: z.string().optional(),
        configuration: z.nullable(QueueConfiguration$.inboundSchema),
        sink: z.nullable(WebhookSink$.inboundSchema).optional(),
        authSession: z.nullable(AuthSession$.inboundSchema).optional(),
        metadata: z.nullable(z.record(z.any())).optional(),
    });

    export type Outbound = {
        id?: string | undefined;
        name?: string | undefined;
        configuration: QueueConfiguration$.Outbound | null;
        sink?: WebhookSink$.Outbound | null | undefined;
        authSession?: AuthSession$.Outbound | null | undefined;
        metadata?: { [k: string]: any } | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, QueueInput> = z.object({
        id: z.string().optional(),
        name: z.string().optional(),
        configuration: z.nullable(QueueConfiguration$.outboundSchema),
        sink: z.nullable(WebhookSink$.outboundSchema).optional(),
        authSession: z.nullable(AuthSession$.outboundSchema).optional(),
        metadata: z.nullable(z.record(z.any())).optional(),
    });
}
