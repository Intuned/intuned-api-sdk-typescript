/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type RunProjectApiRequestRetry = {
    /**
     * The maximum number of attempts to retry the API execution if it fails.
     */
    maximumAttempts: number;
};

export type RunProjectApiRequestIdentity = {
    /**
     * The auth session ID to be used
     */
    id: string;
};

/**
 * The proxy location. If not provided, a rotating proxy will be enabled.
 */
export enum Enabled {
    UsWa = "US-WA",
    UsTx = "US-TX",
    UsFl = "US-FL",
    UsCa = "US-CA",
}

export type RunProjectApiRequestProxy = {
    /**
     * The proxy location. If not provided, a rotating proxy will be enabled.
     */
    enabled: Enabled;
};

export type RunProjectApiRequest = {
    /**
     * The API you want to run from the project
     */
    api: string;
    /**
     * The parameters passed to the running API
     */
    parameters: { [k: string]: any };
    retry?: RunProjectApiRequestRetry | undefined;
    identity?: RunProjectApiRequestIdentity | undefined;
    proxy?: RunProjectApiRequestProxy | undefined;
};

/** @internal */
export namespace RunProjectApiRequestRetry$ {
    export const inboundSchema: z.ZodType<RunProjectApiRequestRetry, z.ZodTypeDef, unknown> = z
        .object({
            maximumAttempts: z.number(),
        })
        .transform((v) => {
            return {
                maximumAttempts: v.maximumAttempts,
            };
        });

    export type Outbound = {
        maximumAttempts: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RunProjectApiRequestRetry> = z
        .object({
            maximumAttempts: z.number(),
        })
        .transform((v) => {
            return {
                maximumAttempts: v.maximumAttempts,
            };
        });
}

/** @internal */
export namespace RunProjectApiRequestIdentity$ {
    export const inboundSchema: z.ZodType<RunProjectApiRequestIdentity, z.ZodTypeDef, unknown> = z
        .object({
            id: z.string(),
        })
        .transform((v) => {
            return {
                id: v.id,
            };
        });

    export type Outbound = {
        id: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RunProjectApiRequestIdentity> = z
        .object({
            id: z.string(),
        })
        .transform((v) => {
            return {
                id: v.id,
            };
        });
}

/** @internal */
export namespace Enabled$ {
    export const inboundSchema = z.nativeEnum(Enabled);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace RunProjectApiRequestProxy$ {
    export const inboundSchema: z.ZodType<RunProjectApiRequestProxy, z.ZodTypeDef, unknown> = z
        .object({
            enabled: Enabled$.inboundSchema,
        })
        .transform((v) => {
            return {
                enabled: v.enabled,
            };
        });

    export type Outbound = {
        enabled: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RunProjectApiRequestProxy> = z
        .object({
            enabled: Enabled$.outboundSchema,
        })
        .transform((v) => {
            return {
                enabled: v.enabled,
            };
        });
}

/** @internal */
export namespace RunProjectApiRequest$ {
    export const inboundSchema: z.ZodType<RunProjectApiRequest, z.ZodTypeDef, unknown> = z
        .object({
            api: z.string(),
            parameters: z.record(z.any()),
            retry: z.lazy(() => RunProjectApiRequestRetry$.inboundSchema).optional(),
            identity: z.lazy(() => RunProjectApiRequestIdentity$.inboundSchema).optional(),
            proxy: z.lazy(() => RunProjectApiRequestProxy$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                api: v.api,
                parameters: v.parameters,
                ...(v.retry === undefined ? null : { retry: v.retry }),
                ...(v.identity === undefined ? null : { identity: v.identity }),
                ...(v.proxy === undefined ? null : { proxy: v.proxy }),
            };
        });

    export type Outbound = {
        api: string;
        parameters: { [k: string]: any };
        retry?: RunProjectApiRequestRetry$.Outbound | undefined;
        identity?: RunProjectApiRequestIdentity$.Outbound | undefined;
        proxy?: RunProjectApiRequestProxy$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RunProjectApiRequest> = z
        .object({
            api: z.string(),
            parameters: z.record(z.any()),
            retry: z.lazy(() => RunProjectApiRequestRetry$.outboundSchema).optional(),
            identity: z.lazy(() => RunProjectApiRequestIdentity$.outboundSchema).optional(),
            proxy: z.lazy(() => RunProjectApiRequestProxy$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                api: v.api,
                parameters: v.parameters,
                ...(v.retry === undefined ? null : { retry: v.retry }),
                ...(v.identity === undefined ? null : { identity: v.identity }),
                ...(v.proxy === undefined ? null : { proxy: v.proxy }),
            };
        });
}
