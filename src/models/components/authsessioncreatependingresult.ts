/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export enum AuthSessionCreatePendingResultStatus {
    Pending = "pending",
}

export type AuthSessionCreatePendingResult = {
    status: AuthSessionCreatePendingResultStatus;
};

/** @internal */
export namespace AuthSessionCreatePendingResultStatus$ {
    export const inboundSchema = z.nativeEnum(AuthSessionCreatePendingResultStatus);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace AuthSessionCreatePendingResult$ {
    export const inboundSchema: z.ZodType<AuthSessionCreatePendingResult, z.ZodTypeDef, unknown> = z
        .object({
            status: AuthSessionCreatePendingResultStatus$.inboundSchema,
        })
        .transform((v) => {
            return {
                status: v.status,
            };
        });

    export type Outbound = {
        status: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AuthSessionCreatePendingResult> =
        z
            .object({
                status: AuthSessionCreatePendingResultStatus$.outboundSchema,
            })
            .transform((v) => {
                return {
                    status: v.status,
                };
            });
}
