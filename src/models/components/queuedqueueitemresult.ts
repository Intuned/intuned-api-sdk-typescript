/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * Execution status of the item
 */
export const QueuedQueueItemResultStatus = {
    Queued: "queued",
} as const;
/**
 * Execution status of the item
 */
export type QueuedQueueItemResultStatus = ClosedEnum<typeof QueuedQueueItemResultStatus>;

export type QueuedQueueItemResult = {
    /**
     * The run ID of the item
     */
    runId: string;
    /**
     * Execution status of the item
     */
    status: QueuedQueueItemResultStatus;
};

/** @internal */
export namespace QueuedQueueItemResultStatus$ {
    export const inboundSchema: z.ZodNativeEnum<typeof QueuedQueueItemResultStatus> = z.nativeEnum(
        QueuedQueueItemResultStatus
    );
    export const outboundSchema: z.ZodNativeEnum<typeof QueuedQueueItemResultStatus> =
        inboundSchema;
}

/** @internal */
export namespace QueuedQueueItemResult$ {
    export const inboundSchema: z.ZodType<QueuedQueueItemResult, z.ZodTypeDef, unknown> = z.object({
        runId: z.string(),
        status: QueuedQueueItemResultStatus$.inboundSchema,
    });

    export type Outbound = {
        runId: string;
        status: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, QueuedQueueItemResult> =
        z.object({
            runId: z.string(),
            status: QueuedQueueItemResultStatus$.outboundSchema,
        });
}
