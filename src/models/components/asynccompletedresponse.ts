/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The status of the asynchronous operation
 */
export enum AsyncCompletedResponseStatus {
    Completed = "completed",
}

export type AsyncCompletedResponse = {
    /**
     * The result of the API run
     */
    result: { [k: string]: any };
    /**
     * The status of the asynchronous operation
     */
    status?: AsyncCompletedResponseStatus | undefined;
    /**
     * The operation ID
     */
    operationId?: string | undefined;
    /**
     * The HTTP status code of the API run
     */
    statusCode?: number | undefined;
};

/** @internal */
export namespace AsyncCompletedResponseStatus$ {
    export const inboundSchema = z.nativeEnum(AsyncCompletedResponseStatus);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace AsyncCompletedResponse$ {
    export const inboundSchema: z.ZodType<AsyncCompletedResponse, z.ZodTypeDef, unknown> = z
        .object({
            result: z.record(z.any()),
            status: AsyncCompletedResponseStatus$.inboundSchema.optional(),
            operationId: z.string().optional(),
            statusCode: z.number().optional(),
        })
        .transform((v) => {
            return {
                result: v.result,
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.operationId === undefined ? null : { operationId: v.operationId }),
                ...(v.statusCode === undefined ? null : { statusCode: v.statusCode }),
            };
        });

    export type Outbound = {
        result: { [k: string]: any };
        status?: string | undefined;
        operationId?: string | undefined;
        statusCode?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AsyncCompletedResponse> = z
        .object({
            result: z.record(z.any()),
            status: AsyncCompletedResponseStatus$.outboundSchema.optional(),
            operationId: z.string().optional(),
            statusCode: z.number().optional(),
        })
        .transform((v) => {
            return {
                result: v.result,
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.operationId === undefined ? null : { operationId: v.operationId }),
                ...(v.statusCode === undefined ? null : { statusCode: v.statusCode }),
            };
        });
}
