/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export enum QueueItemResult3Status {
    Failed = "failed",
}

export type Three = {
    runId?: string | undefined;
    status?: QueueItemResult3Status | undefined;
    error?: { [k: string]: any } | undefined;
    statusCode?: number | undefined;
};

export enum QueueItemResult2Status {
    Completed = "completed",
}

export type QueueItemResult2 = {
    runId?: string | undefined;
    status?: QueueItemResult2Status | undefined;
    result?: { [k: string]: any } | undefined;
    statusCode?: number | undefined;
};

export enum QueueItemResultStatus {
    Pending = "pending",
}

export type QueueItemResult1 = {
    runId?: string | undefined;
    status?: QueueItemResultStatus | undefined;
};

export type QueueItemResult = QueueItemResult1 | QueueItemResult2 | Three;

/** @internal */
export namespace QueueItemResult3Status$ {
    export const inboundSchema = z.nativeEnum(QueueItemResult3Status);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace Three$ {
    export const inboundSchema: z.ZodType<Three, z.ZodTypeDef, unknown> = z
        .object({
            runId: z.string().optional(),
            status: QueueItemResult3Status$.inboundSchema.optional(),
            error: z.record(z.any()).optional(),
            statusCode: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.runId === undefined ? null : { runId: v.runId }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.error === undefined ? null : { error: v.error }),
                ...(v.statusCode === undefined ? null : { statusCode: v.statusCode }),
            };
        });

    export type Outbound = {
        runId?: string | undefined;
        status?: string | undefined;
        error?: { [k: string]: any } | undefined;
        statusCode?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Three> = z
        .object({
            runId: z.string().optional(),
            status: QueueItemResult3Status$.outboundSchema.optional(),
            error: z.record(z.any()).optional(),
            statusCode: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.runId === undefined ? null : { runId: v.runId }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.error === undefined ? null : { error: v.error }),
                ...(v.statusCode === undefined ? null : { statusCode: v.statusCode }),
            };
        });
}

/** @internal */
export namespace QueueItemResult2Status$ {
    export const inboundSchema = z.nativeEnum(QueueItemResult2Status);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace QueueItemResult2$ {
    export const inboundSchema: z.ZodType<QueueItemResult2, z.ZodTypeDef, unknown> = z
        .object({
            runId: z.string().optional(),
            status: QueueItemResult2Status$.inboundSchema.optional(),
            result: z.record(z.any()).optional(),
            statusCode: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.runId === undefined ? null : { runId: v.runId }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.result === undefined ? null : { result: v.result }),
                ...(v.statusCode === undefined ? null : { statusCode: v.statusCode }),
            };
        });

    export type Outbound = {
        runId?: string | undefined;
        status?: string | undefined;
        result?: { [k: string]: any } | undefined;
        statusCode?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, QueueItemResult2> = z
        .object({
            runId: z.string().optional(),
            status: QueueItemResult2Status$.outboundSchema.optional(),
            result: z.record(z.any()).optional(),
            statusCode: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.runId === undefined ? null : { runId: v.runId }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.result === undefined ? null : { result: v.result }),
                ...(v.statusCode === undefined ? null : { statusCode: v.statusCode }),
            };
        });
}

/** @internal */
export namespace QueueItemResultStatus$ {
    export const inboundSchema = z.nativeEnum(QueueItemResultStatus);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace QueueItemResult1$ {
    export const inboundSchema: z.ZodType<QueueItemResult1, z.ZodTypeDef, unknown> = z
        .object({
            runId: z.string().optional(),
            status: QueueItemResultStatus$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.runId === undefined ? null : { runId: v.runId }),
                ...(v.status === undefined ? null : { status: v.status }),
            };
        });

    export type Outbound = {
        runId?: string | undefined;
        status?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, QueueItemResult1> = z
        .object({
            runId: z.string().optional(),
            status: QueueItemResultStatus$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.runId === undefined ? null : { runId: v.runId }),
                ...(v.status === undefined ? null : { status: v.status }),
            };
        });
}

/** @internal */
export namespace QueueItemResult$ {
    export const inboundSchema: z.ZodType<QueueItemResult, z.ZodTypeDef, unknown> = z.union([
        z.lazy(() => QueueItemResult1$.inboundSchema),
        z.lazy(() => QueueItemResult2$.inboundSchema),
        z.lazy(() => Three$.inboundSchema),
    ]);

    export type Outbound =
        | QueueItemResult1$.Outbound
        | QueueItemResult2$.Outbound
        | Three$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, QueueItemResult> = z.union([
        z.lazy(() => QueueItemResult1$.outboundSchema),
        z.lazy(() => QueueItemResult2$.outboundSchema),
        z.lazy(() => Three$.outboundSchema),
    ]);
}
