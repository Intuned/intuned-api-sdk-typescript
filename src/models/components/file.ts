/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ImageFile, ImageFile$, Type } from "./imagefile";
import { PdfFile, PdfFile$, PdfFileType } from "./pdffile";
import * as z from "zod";

export type FileT = (ImageFile & { type: Type.Image }) | (PdfFile & { type: PdfFileType.Pdf });

/** @internal */
export namespace FileT$ {
    export const inboundSchema: z.ZodType<FileT, z.ZodTypeDef, unknown> = z.union([
        ImageFile$.inboundSchema.and(
            z.object({ type: z.literal(Type.Image) }).transform((v) => ({ type: v.type }))
        ),
        PdfFile$.inboundSchema.and(
            z.object({ type: z.literal(PdfFileType.Pdf) }).transform((v) => ({ type: v.type }))
        ),
    ]);

    export type Outbound =
        | (ImageFile$.Outbound & { type: Type.Image })
        | (PdfFile$.Outbound & { type: PdfFileType.Pdf });
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FileT> = z.union([
        ImageFile$.outboundSchema.and(
            z.object({ type: z.literal(Type.Image) }).transform((v) => ({ type: v.type }))
        ),
        PdfFile$.outboundSchema.and(
            z.object({ type: z.literal(PdfFileType.Pdf) }).transform((v) => ({ type: v.type }))
        ),
    ]);
}
