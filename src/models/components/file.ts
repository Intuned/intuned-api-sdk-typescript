/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
    ImageFile,
    ImageFile$inboundSchema,
    ImageFile$Outbound,
    ImageFile$outboundSchema,
} from "./imagefile.js";
import {
    PdfFile,
    PdfFile$inboundSchema,
    PdfFile$Outbound,
    PdfFile$outboundSchema,
} from "./pdffile.js";
import * as z from "zod";

export type FileT = (ImageFile & { type: "image" }) | (PdfFile & { type: "pdf" });

/** @internal */
export const FileT$inboundSchema: z.ZodType<FileT, z.ZodTypeDef, unknown> = z.union([
    ImageFile$inboundSchema.and(
        z.object({ type: z.literal("image") }).transform((v) => ({ type: v.type }))
    ),
    PdfFile$inboundSchema.and(
        z.object({ type: z.literal("pdf") }).transform((v) => ({ type: v.type }))
    ),
]);

/** @internal */
export type FileT$Outbound =
    | (ImageFile$Outbound & { type: "image" })
    | (PdfFile$Outbound & { type: "pdf" });

/** @internal */
export const FileT$outboundSchema: z.ZodType<FileT$Outbound, z.ZodTypeDef, FileT> = z.union([
    ImageFile$outboundSchema.and(
        z.object({ type: z.literal("image") }).transform((v) => ({ type: v.type }))
    ),
    PdfFile$outboundSchema.and(
        z.object({ type: z.literal("pdf") }).transform((v) => ({ type: v.type }))
    ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FileT$ {
    /** @deprecated use `FileT$inboundSchema` instead. */
    export const inboundSchema = FileT$inboundSchema;
    /** @deprecated use `FileT$outboundSchema` instead. */
    export const outboundSchema = FileT$outboundSchema;
    /** @deprecated use `FileT$Outbound` instead. */
    export type Outbound = FileT$Outbound;
}
