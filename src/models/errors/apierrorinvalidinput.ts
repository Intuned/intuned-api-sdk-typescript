/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import { collectExtraKeys as collectExtraKeys$ } from "../../lib/schemas";
import * as z from "zod";

/**
 * Invalid input error
 */
export type ApiErrorInvalidInputData = {
    details?: any | undefined;
    error?: string | undefined;

    additionalProperties: { [k: string]: any };
};

/**
 * Invalid input error
 */
export class ApiErrorInvalidInput extends Error {
    details?: any | undefined;
    error?: string | undefined;
    additionalProperties: { [k: string]: any } = {};

    /** The original data that was passed to this error instance. */
    data$: ApiErrorInvalidInputData;

    constructor(err: ApiErrorInvalidInputData) {
        super("");
        this.data$ = err;

        if (err.details != null) {
            this.details = err.details;
        }
        if (err.error != null) {
            this.error = err.error;
        }
        if (err.additionalProperties != null) {
            this.additionalProperties = err.additionalProperties;
        }

        this.message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : "API error occurred";

        this.name = "ApiErrorInvalidInput";
    }
}

/** @internal */
export namespace ApiErrorInvalidInput$ {
    export const inboundSchema: z.ZodType<ApiErrorInvalidInput, z.ZodTypeDef, unknown> =
        collectExtraKeys$(
            z
                .object({
                    details: z.any().optional(),
                    error: z.string().optional(),
                })
                .catchall(z.any()),
            "additionalProperties"
        ).transform((v) => {
            return new ApiErrorInvalidInput(v);
        });

    export type Outbound = {
        details?: any | undefined;
        error?: string | undefined;
        [additionalProperties: string]: unknown;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ApiErrorInvalidInput> = z
        .instanceof(ApiErrorInvalidInput)
        .transform((v) => v.data$)
        .pipe(
            z
                .object({
                    details: z.any().optional(),
                    error: z.string().optional(),
                    additionalProperties: z.record(z.any()),
                })
                .transform((v) => {
                    return {
                        ...v.additionalProperties,
                        ...remap$(v, {
                            additionalProperties: null,
                        }),
                    };
                })
        );
}
