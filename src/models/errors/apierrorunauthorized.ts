/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { collectExtraKeys as collectExtraKeys$ } from "../../lib/schemas.js";
import * as z from "zod";

/**
 * Unauthorized error
 */
export type ApiErrorUnauthorizedData = {
    message?: string | undefined;

    additionalProperties: { [k: string]: any };
};

/**
 * Unauthorized error
 */
export class ApiErrorUnauthorized extends Error {
    additionalProperties: { [k: string]: any } = {};

    /** The original data that was passed to this error instance. */
    data$: ApiErrorUnauthorizedData;

    constructor(err: ApiErrorUnauthorizedData) {
        super("");
        this.data$ = err;

        if (err.additionalProperties != null) {
            this.additionalProperties = err.additionalProperties;
        }

        this.message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : "API error occurred";

        this.name = "ApiErrorUnauthorized";
    }
}

/** @internal */
export namespace ApiErrorUnauthorized$ {
    export const inboundSchema: z.ZodType<ApiErrorUnauthorized, z.ZodTypeDef, unknown> =
        collectExtraKeys$(
            z
                .object({
                    message: z.string().optional(),
                })
                .catchall(z.any()),
            "additionalProperties"
        ).transform((v) => {
            return new ApiErrorUnauthorized(v);
        });

    export type Outbound = {
        message?: string | undefined;
        [additionalProperties: string]: unknown;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ApiErrorUnauthorized> = z
        .instanceof(ApiErrorUnauthorized)
        .transform((v) => v.data$)
        .pipe(
            z
                .object({
                    message: z.string().optional(),
                    additionalProperties: z.record(z.any()),
                })
                .transform((v) => {
                    return {
                        ...v.additionalProperties,
                        ...remap$(v, {
                            additionalProperties: null,
                        }),
                    };
                })
        );
}
