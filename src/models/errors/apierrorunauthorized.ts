/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { collectExtraKeys as collectExtraKeys$ } from "../../lib/schemas.js";
import * as z from "zod";

/**
 * Unauthorized error
 */
export type ApiErrorUnauthorizedData = {
    message?: string | undefined;

    additionalProperties: { [k: string]: any };
};

/**
 * Unauthorized error
 */
export class ApiErrorUnauthorized extends Error {
    additionalProperties: { [k: string]: any } = {};

    /** The original data that was passed to this error instance. */
    data$: ApiErrorUnauthorizedData;

    constructor(err: ApiErrorUnauthorizedData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        if (err.additionalProperties != null) {
            this.additionalProperties = err.additionalProperties;
        }

        this.name = "ApiErrorUnauthorized";
    }
}

/** @internal */
export const ApiErrorUnauthorized$inboundSchema: z.ZodType<
    ApiErrorUnauthorized,
    z.ZodTypeDef,
    unknown
> = collectExtraKeys$(
    z
        .object({
            message: z.string().optional(),
        })
        .catchall(z.any()),
    "additionalProperties"
).transform((v) => {
    return new ApiErrorUnauthorized(v);
});

/** @internal */
export type ApiErrorUnauthorized$Outbound = {
    message?: string | undefined;
    [additionalProperties: string]: unknown;
};

/** @internal */
export const ApiErrorUnauthorized$outboundSchema: z.ZodType<
    ApiErrorUnauthorized$Outbound,
    z.ZodTypeDef,
    ApiErrorUnauthorized
> = z
    .instanceof(ApiErrorUnauthorized)
    .transform((v) => v.data$)
    .pipe(
        z
            .object({
                message: z.string().optional(),
                additionalProperties: z.record(z.any()),
            })
            .transform((v) => {
                return {
                    ...v.additionalProperties,
                    ...remap$(v, {
                        additionalProperties: null,
                    }),
                };
            })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiErrorUnauthorized$ {
    /** @deprecated use `ApiErrorUnauthorized$inboundSchema` instead. */
    export const inboundSchema = ApiErrorUnauthorized$inboundSchema;
    /** @deprecated use `ApiErrorUnauthorized$outboundSchema` instead. */
    export const outboundSchema = ApiErrorUnauthorized$outboundSchema;
    /** @deprecated use `ApiErrorUnauthorized$Outbound` instead. */
    export type Outbound = ApiErrorUnauthorized$Outbound;
}
