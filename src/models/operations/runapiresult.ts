/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as components from "../components";
import * as z from "zod";

export type RunApiResultGlobals = {
    /**
     * Your workspace ID. [How to find it](https://docs.intunedhq.com/docs/management/workspace#finding-your-workspace-id)?
     */
    workspaceId: string;
};

export type RunApiResultRequest = {
    /**
     * Your project name. It is the name you provide when creating a project.
     */
    projectName: string;
    /**
     * Run ID
     */
    runId: string;
};

export type RunApiResultResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Result of the run operation. Could be pending, completed or failed.
     */
    asyncResultResponse?: components.AsyncResultResponse | undefined;
};

/** @internal */
export namespace RunApiResultGlobals$ {
    export const inboundSchema: z.ZodType<RunApiResultGlobals, z.ZodTypeDef, unknown> = z.object({
        workspaceId: z.string(),
    });

    export type Outbound = {
        workspaceId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RunApiResultGlobals> = z.object({
        workspaceId: z.string(),
    });
}

/** @internal */
export namespace RunApiResultRequest$ {
    export const inboundSchema: z.ZodType<RunApiResultRequest, z.ZodTypeDef, unknown> = z.object({
        projectName: z.string(),
        runId: z.string(),
    });

    export type Outbound = {
        projectName: string;
        runId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RunApiResultRequest> = z.object({
        projectName: z.string(),
        runId: z.string(),
    });
}

/** @internal */
export namespace RunApiResultResponse$ {
    export const inboundSchema: z.ZodType<RunApiResultResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            AsyncResultResponse: components.AsyncResultResponse$.inboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                HttpMeta: "httpMeta",
                AsyncResultResponse: "asyncResultResponse",
            });
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        AsyncResultResponse?: components.AsyncResultResponse$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RunApiResultResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            asyncResultResponse: components.AsyncResultResponse$.outboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                httpMeta: "HttpMeta",
                asyncResultResponse: "AsyncResultResponse",
            });
        });
}
