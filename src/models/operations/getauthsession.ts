/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as components from "../components";
import * as z from "zod";

export type GetAuthSessionGlobals = {
    /**
     * Your workspace ID. [How to find it](https://docs.intunedhq.com/docs/management/workspace#finding-your-workspace-id)?
     */
    workspaceId: string;
};

export type GetAuthSessionRequest = {
    /**
     * Your project name. It is the name you provide when creating a project.
     */
    projectName: string;
    /**
     * Authentication session ID. You can obtain it from the Auth Sessions tab in your project details.
     */
    authSessionId: string;
};

export type GetAuthSessionResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Successful result
     */
    authSessionInfo?: components.AuthSessionInfo | undefined;
};

/** @internal */
export namespace GetAuthSessionGlobals$ {
    export const inboundSchema: z.ZodType<GetAuthSessionGlobals, z.ZodTypeDef, unknown> = z.object({
        workspaceId: z.string(),
    });

    export type Outbound = {
        workspaceId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetAuthSessionGlobals> =
        z.object({
            workspaceId: z.string(),
        });
}

/** @internal */
export namespace GetAuthSessionRequest$ {
    export const inboundSchema: z.ZodType<GetAuthSessionRequest, z.ZodTypeDef, unknown> = z.object({
        projectName: z.string(),
        authSessionId: z.string(),
    });

    export type Outbound = {
        projectName: string;
        authSessionId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetAuthSessionRequest> =
        z.object({
            projectName: z.string(),
            authSessionId: z.string(),
        });
}

/** @internal */
export namespace GetAuthSessionResponse$ {
    export const inboundSchema: z.ZodType<GetAuthSessionResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            AuthSessionInfo: components.AuthSessionInfo$.inboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                HttpMeta: "httpMeta",
                AuthSessionInfo: "authSessionInfo",
            });
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        AuthSessionInfo?: components.AuthSessionInfo$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetAuthSessionResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            authSessionInfo: components.AuthSessionInfo$.outboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                httpMeta: "HttpMeta",
                authSessionInfo: "AuthSessionInfo",
            });
        });
}
