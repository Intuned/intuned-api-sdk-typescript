/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type RunSyncGlobals = {
    /**
     * Workspace Id.
     */
    workspaceId?: string | undefined;
    /**
     * Project Name.
     */
    projectName?: string | undefined;
};

export type RunSyncRequest = {
    /**
     * Project name
     */
    projectName?: string | undefined;
    /**
     * run project api request
     */
    runProjectApiRequest?: components.RunProjectApiRequest | undefined;
};

export type RunSyncResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Successful result
     */
    completedRunResult?: components.CompletedRunResult | undefined;
    /**
     * Other error
     */
    failedRunResult?: components.FailedRunResult | undefined;
};

/** @internal */
export namespace RunSyncGlobals$ {
    export const inboundSchema: z.ZodType<RunSyncGlobals, z.ZodTypeDef, unknown> = z
        .object({
            workspaceId: z.string().optional(),
            projectName: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.workspaceId === undefined ? null : { workspaceId: v.workspaceId }),
                ...(v.projectName === undefined ? null : { projectName: v.projectName }),
            };
        });

    export type Outbound = {
        workspaceId?: string | undefined;
        projectName?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RunSyncGlobals> = z
        .object({
            workspaceId: z.string().optional(),
            projectName: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.workspaceId === undefined ? null : { workspaceId: v.workspaceId }),
                ...(v.projectName === undefined ? null : { projectName: v.projectName }),
            };
        });
}

/** @internal */
export namespace RunSyncRequest$ {
    export const inboundSchema: z.ZodType<RunSyncRequest, z.ZodTypeDef, unknown> = z
        .object({
            projectName: z.string().optional(),
            RunProjectApiRequest: components.RunProjectApiRequest$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.projectName === undefined ? null : { projectName: v.projectName }),
                ...(v.RunProjectApiRequest === undefined
                    ? null
                    : { runProjectApiRequest: v.RunProjectApiRequest }),
            };
        });

    export type Outbound = {
        projectName?: string | undefined;
        RunProjectApiRequest?: components.RunProjectApiRequest$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RunSyncRequest> = z
        .object({
            projectName: z.string().optional(),
            runProjectApiRequest: components.RunProjectApiRequest$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.projectName === undefined ? null : { projectName: v.projectName }),
                ...(v.runProjectApiRequest === undefined
                    ? null
                    : { RunProjectApiRequest: v.runProjectApiRequest }),
            };
        });
}

/** @internal */
export namespace RunSyncResponse$ {
    export const inboundSchema: z.ZodType<RunSyncResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            CompletedRunResult: components.CompletedRunResult$.inboundSchema.optional(),
            FailedRunResult: components.FailedRunResult$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.CompletedRunResult === undefined
                    ? null
                    : { completedRunResult: v.CompletedRunResult }),
                ...(v.FailedRunResult === undefined
                    ? null
                    : { failedRunResult: v.FailedRunResult }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        CompletedRunResult?: components.CompletedRunResult$.Outbound | undefined;
        FailedRunResult?: components.FailedRunResult$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RunSyncResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            completedRunResult: components.CompletedRunResult$.outboundSchema.optional(),
            failedRunResult: components.FailedRunResult$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.completedRunResult === undefined
                    ? null
                    : { CompletedRunResult: v.completedRunResult }),
                ...(v.failedRunResult === undefined
                    ? null
                    : { FailedRunResult: v.failedRunResult }),
            };
        });
}
