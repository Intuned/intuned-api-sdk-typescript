/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as components from "../components";
import * as z from "zod";

export type RunApiSyncGlobals = {
    /**
     * Your workspace ID. [How to find it](https://docs.intunedhq.com/docs/management/workspace#finding-your-workspace-id)?
     */
    workspaceId: string;
};

export type RunApiSyncRequest = {
    /**
     * Your project name. It is the name you provide when creating a project.
     */
    projectName: string;
    /**
     * run project api request
     */
    runProjectApiRequest: components.RunProjectApiRequest;
};

export type RunApiSyncResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Successful run result
     */
    completedRunResult?: components.CompletedRunResult | undefined;
    /**
     * Error running the API
     */
    failedRunResult?: components.FailedRunResult | undefined;
};

/** @internal */
export namespace RunApiSyncGlobals$ {
    export const inboundSchema: z.ZodType<RunApiSyncGlobals, z.ZodTypeDef, unknown> = z.object({
        workspaceId: z.string(),
    });

    export type Outbound = {
        workspaceId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RunApiSyncGlobals> = z.object({
        workspaceId: z.string(),
    });
}

/** @internal */
export namespace RunApiSyncRequest$ {
    export const inboundSchema: z.ZodType<RunApiSyncRequest, z.ZodTypeDef, unknown> = z
        .object({
            projectName: z.string(),
            RunProjectApiRequest: components.RunProjectApiRequest$.inboundSchema,
        })
        .transform((v) => {
            return remap$(v, {
                RunProjectApiRequest: "runProjectApiRequest",
            });
        });

    export type Outbound = {
        projectName: string;
        RunProjectApiRequest: components.RunProjectApiRequest$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RunApiSyncRequest> = z
        .object({
            projectName: z.string(),
            runProjectApiRequest: components.RunProjectApiRequest$.outboundSchema,
        })
        .transform((v) => {
            return remap$(v, {
                runProjectApiRequest: "RunProjectApiRequest",
            });
        });
}

/** @internal */
export namespace RunApiSyncResponse$ {
    export const inboundSchema: z.ZodType<RunApiSyncResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            CompletedRunResult: components.CompletedRunResult$.inboundSchema.optional(),
            FailedRunResult: components.FailedRunResult$.inboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                HttpMeta: "httpMeta",
                CompletedRunResult: "completedRunResult",
                FailedRunResult: "failedRunResult",
            });
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        CompletedRunResult?: components.CompletedRunResult$.Outbound | undefined;
        FailedRunResult?: components.FailedRunResult$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RunApiSyncResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            completedRunResult: components.CompletedRunResult$.outboundSchema.optional(),
            failedRunResult: components.FailedRunResult$.outboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                httpMeta: "HttpMeta",
                completedRunResult: "CompletedRunResult",
                failedRunResult: "FailedRunResult",
            });
        });
}
