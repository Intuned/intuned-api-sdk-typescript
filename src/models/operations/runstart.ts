/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type RunStartGlobals = {
    /**
     * Workspace Id.
     */
    workspaceId?: string | undefined;
    /**
     * Project Name.
     */
    projectName?: string | undefined;
};

export type RunStartRequest = {
    /**
     * Project name
     */
    projectName?: string | undefined;
    /**
     * run project api request
     */
    runProjectApiRequest?: components.RunProjectApiRequest | undefined;
};

export type RunStartResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * API run operation started
     */
    asyncPendingResponse?: components.AsyncPendingResponse | undefined;
};

/** @internal */
export namespace RunStartGlobals$ {
    export const inboundSchema: z.ZodType<RunStartGlobals, z.ZodTypeDef, unknown> = z
        .object({
            workspaceId: z.string().optional(),
            projectName: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.workspaceId === undefined ? null : { workspaceId: v.workspaceId }),
                ...(v.projectName === undefined ? null : { projectName: v.projectName }),
            };
        });

    export type Outbound = {
        workspaceId?: string | undefined;
        projectName?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RunStartGlobals> = z
        .object({
            workspaceId: z.string().optional(),
            projectName: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.workspaceId === undefined ? null : { workspaceId: v.workspaceId }),
                ...(v.projectName === undefined ? null : { projectName: v.projectName }),
            };
        });
}

/** @internal */
export namespace RunStartRequest$ {
    export const inboundSchema: z.ZodType<RunStartRequest, z.ZodTypeDef, unknown> = z
        .object({
            projectName: z.string().optional(),
            RunProjectApiRequest: components.RunProjectApiRequest$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.projectName === undefined ? null : { projectName: v.projectName }),
                ...(v.RunProjectApiRequest === undefined
                    ? null
                    : { runProjectApiRequest: v.RunProjectApiRequest }),
            };
        });

    export type Outbound = {
        projectName?: string | undefined;
        RunProjectApiRequest?: components.RunProjectApiRequest$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RunStartRequest> = z
        .object({
            projectName: z.string().optional(),
            runProjectApiRequest: components.RunProjectApiRequest$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.projectName === undefined ? null : { projectName: v.projectName }),
                ...(v.runProjectApiRequest === undefined
                    ? null
                    : { RunProjectApiRequest: v.runProjectApiRequest }),
            };
        });
}

/** @internal */
export namespace RunStartResponse$ {
    export const inboundSchema: z.ZodType<RunStartResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            AsyncPendingResponse: components.AsyncPendingResponse$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.AsyncPendingResponse === undefined
                    ? null
                    : { asyncPendingResponse: v.AsyncPendingResponse }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        AsyncPendingResponse?: components.AsyncPendingResponse$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RunStartResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            asyncPendingResponse: components.AsyncPendingResponse$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.asyncPendingResponse === undefined
                    ? null
                    : { AsyncPendingResponse: v.asyncPendingResponse }),
            };
        });
}
