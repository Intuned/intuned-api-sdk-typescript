/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type RunResultGlobals = {
    /**
     * Workspace Id.
     */
    workspaceId?: string | undefined;
    /**
     * Project Name.
     */
    projectName?: string | undefined;
};

export type RunResultRequest = {
    /**
     * Project name
     */
    projectName?: string | undefined;
    /**
     * Run ID provided from start API
     */
    runId: string;
};

export type RunResultResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Result of the run operation. Could be pending, completed or failed.
     */
    asyncResultResponse?: components.AsyncResultResponse | undefined;
};

/** @internal */
export namespace RunResultGlobals$ {
    export const inboundSchema: z.ZodType<RunResultGlobals, z.ZodTypeDef, unknown> = z
        .object({
            workspaceId: z.string().optional(),
            projectName: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.workspaceId === undefined ? null : { workspaceId: v.workspaceId }),
                ...(v.projectName === undefined ? null : { projectName: v.projectName }),
            };
        });

    export type Outbound = {
        workspaceId?: string | undefined;
        projectName?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RunResultGlobals> = z
        .object({
            workspaceId: z.string().optional(),
            projectName: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.workspaceId === undefined ? null : { workspaceId: v.workspaceId }),
                ...(v.projectName === undefined ? null : { projectName: v.projectName }),
            };
        });
}

/** @internal */
export namespace RunResultRequest$ {
    export const inboundSchema: z.ZodType<RunResultRequest, z.ZodTypeDef, unknown> = z
        .object({
            projectName: z.string().optional(),
            runId: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.projectName === undefined ? null : { projectName: v.projectName }),
                runId: v.runId,
            };
        });

    export type Outbound = {
        projectName?: string | undefined;
        runId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RunResultRequest> = z
        .object({
            projectName: z.string().optional(),
            runId: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.projectName === undefined ? null : { projectName: v.projectName }),
                runId: v.runId,
            };
        });
}

/** @internal */
export namespace RunResultResponse$ {
    export const inboundSchema: z.ZodType<RunResultResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            AsyncResultResponse: components.AsyncResultResponse$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.AsyncResultResponse === undefined
                    ? null
                    : { asyncResultResponse: v.AsyncResultResponse }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        AsyncResultResponse?: components.AsyncResultResponse$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RunResultResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            asyncResultResponse: components.AsyncResultResponse$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.asyncResultResponse === undefined
                    ? null
                    : { AsyncResultResponse: v.asyncResultResponse }),
            };
        });
}
