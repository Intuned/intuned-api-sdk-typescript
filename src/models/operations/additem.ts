/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type AddItemGlobals = {
    /**
     * Workspace ID
     */
    workspaceId: string;
    /**
     * Project name
     */
    projectName: string;
};

export type AddItemRequest = {
    /**
     * Project name
     */
    projectName?: string | undefined;
    /**
     * Queue ID
     */
    queueId: string;
    /**
     * queue item
     */
    queueItem?: components.QueueItem | undefined;
};

export type AddItemResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Queue item appended
     */
    addQueueItem?: components.AddQueueItem | undefined;
};

/** @internal */
export namespace AddItemGlobals$ {
    export const inboundSchema: z.ZodType<AddItemGlobals, z.ZodTypeDef, unknown> = z
        .object({
            workspaceId: z.string(),
            projectName: z.string(),
        })
        .transform((v) => {
            return {
                workspaceId: v.workspaceId,
                projectName: v.projectName,
            };
        });

    export type Outbound = {
        workspaceId: string;
        projectName: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AddItemGlobals> = z
        .object({
            workspaceId: z.string(),
            projectName: z.string(),
        })
        .transform((v) => {
            return {
                workspaceId: v.workspaceId,
                projectName: v.projectName,
            };
        });
}

/** @internal */
export namespace AddItemRequest$ {
    export const inboundSchema: z.ZodType<AddItemRequest, z.ZodTypeDef, unknown> = z
        .object({
            projectName: z.string().optional(),
            queueId: z.string(),
            QueueItem: components.QueueItem$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.projectName === undefined ? null : { projectName: v.projectName }),
                queueId: v.queueId,
                ...(v.QueueItem === undefined ? null : { queueItem: v.QueueItem }),
            };
        });

    export type Outbound = {
        projectName?: string | undefined;
        queueId: string;
        QueueItem?: components.QueueItem$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AddItemRequest> = z
        .object({
            projectName: z.string().optional(),
            queueId: z.string(),
            queueItem: components.QueueItem$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.projectName === undefined ? null : { projectName: v.projectName }),
                queueId: v.queueId,
                ...(v.queueItem === undefined ? null : { QueueItem: v.queueItem }),
            };
        });
}

/** @internal */
export namespace AddItemResponse$ {
    export const inboundSchema: z.ZodType<AddItemResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            AddQueueItem: components.AddQueueItem$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.AddQueueItem === undefined ? null : { addQueueItem: v.AddQueueItem }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        AddQueueItem?: components.AddQueueItem$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AddItemResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            addQueueItem: components.AddQueueItem$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.addQueueItem === undefined ? null : { AddQueueItem: v.addQueueItem }),
            };
        });
}
