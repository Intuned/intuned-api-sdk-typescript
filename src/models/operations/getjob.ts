/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type GetJobGlobals = {
    /**
     * Workspace ID
     */
    workspaceId: string;
};

export type GetJobRequest = {
    /**
     * Project name
     */
    projectName: string;
    /**
     * Job ID
     */
    jobId: string;
};

export type GetJobResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Job object
     */
    job?: components.Job | undefined;
};

/** @internal */
export namespace GetJobGlobals$ {
    export const inboundSchema: z.ZodType<GetJobGlobals, z.ZodTypeDef, unknown> = z
        .object({
            workspaceId: z.string(),
        })
        .transform((v) => {
            return {
                workspaceId: v.workspaceId,
            };
        });

    export type Outbound = {
        workspaceId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetJobGlobals> = z
        .object({
            workspaceId: z.string(),
        })
        .transform((v) => {
            return {
                workspaceId: v.workspaceId,
            };
        });
}

/** @internal */
export namespace GetJobRequest$ {
    export const inboundSchema: z.ZodType<GetJobRequest, z.ZodTypeDef, unknown> = z
        .object({
            projectName: z.string(),
            jobId: z.string(),
        })
        .transform((v) => {
            return {
                projectName: v.projectName,
                jobId: v.jobId,
            };
        });

    export type Outbound = {
        projectName: string;
        jobId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetJobRequest> = z
        .object({
            projectName: z.string(),
            jobId: z.string(),
        })
        .transform((v) => {
            return {
                projectName: v.projectName,
                jobId: v.jobId,
            };
        });
}

/** @internal */
export namespace GetJobResponse$ {
    export const inboundSchema: z.ZodType<GetJobResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            Job: components.Job$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.Job === undefined ? null : { job: v.Job }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        Job?: components.Job$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetJobResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            job: components.Job$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.job === undefined ? null : { Job: v.job }),
            };
        });
}
