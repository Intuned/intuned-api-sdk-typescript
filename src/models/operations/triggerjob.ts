/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type TriggerJobGlobals = {
    /**
     * Workspace Id.
     */
    workspaceId?: string | undefined;
    /**
     * Project Name.
     */
    projectName?: string | undefined;
};

export type TriggerJobRequest = {
    /**
     * Project name
     */
    projectName?: string | undefined;
    /**
     * Job ID
     */
    jobId: string;
};

export enum TriggerJobMessage {
    Triggered = "Triggered",
}

/**
 * Triggered successfully
 */
export type TriggerJobResponseBody = {
    id?: string | undefined;
    message?: TriggerJobMessage | undefined;
};

export type TriggerJobResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Triggered successfully
     */
    object?: TriggerJobResponseBody | undefined;
};

/** @internal */
export namespace TriggerJobGlobals$ {
    export const inboundSchema: z.ZodType<TriggerJobGlobals, z.ZodTypeDef, unknown> = z
        .object({
            workspaceId: z.string().optional(),
            projectName: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.workspaceId === undefined ? null : { workspaceId: v.workspaceId }),
                ...(v.projectName === undefined ? null : { projectName: v.projectName }),
            };
        });

    export type Outbound = {
        workspaceId?: string | undefined;
        projectName?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TriggerJobGlobals> = z
        .object({
            workspaceId: z.string().optional(),
            projectName: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.workspaceId === undefined ? null : { workspaceId: v.workspaceId }),
                ...(v.projectName === undefined ? null : { projectName: v.projectName }),
            };
        });
}

/** @internal */
export namespace TriggerJobRequest$ {
    export const inboundSchema: z.ZodType<TriggerJobRequest, z.ZodTypeDef, unknown> = z
        .object({
            projectName: z.string().optional(),
            jobId: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.projectName === undefined ? null : { projectName: v.projectName }),
                jobId: v.jobId,
            };
        });

    export type Outbound = {
        projectName?: string | undefined;
        jobId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TriggerJobRequest> = z
        .object({
            projectName: z.string().optional(),
            jobId: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.projectName === undefined ? null : { projectName: v.projectName }),
                jobId: v.jobId,
            };
        });
}

/** @internal */
export namespace TriggerJobMessage$ {
    export const inboundSchema = z.nativeEnum(TriggerJobMessage);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace TriggerJobResponseBody$ {
    export const inboundSchema: z.ZodType<TriggerJobResponseBody, z.ZodTypeDef, unknown> = z
        .object({
            id: z.string().optional(),
            message: TriggerJobMessage$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.message === undefined ? null : { message: v.message }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        message?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TriggerJobResponseBody> = z
        .object({
            id: z.string().optional(),
            message: TriggerJobMessage$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.message === undefined ? null : { message: v.message }),
            };
        });
}

/** @internal */
export namespace TriggerJobResponse$ {
    export const inboundSchema: z.ZodType<TriggerJobResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            object: z.lazy(() => TriggerJobResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        object?: TriggerJobResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TriggerJobResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            object: z.lazy(() => TriggerJobResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
