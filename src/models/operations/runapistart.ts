/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type RunApiStartGlobals = {
    /**
     * Workspace ID
     */
    workspaceId: string;
};

export type RunApiStartRequest = {
    /**
     * Project name
     */
    projectName: string;
    /**
     * run project api request
     */
    runProjectApiRequest?: components.RunProjectApiRequest | undefined;
};

export type RunApiStartResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * API run operation started
     */
    asyncRunPendingResponse?: components.AsyncRunPendingResponse | undefined;
};

/** @internal */
export namespace RunApiStartGlobals$ {
    export const inboundSchema: z.ZodType<RunApiStartGlobals, z.ZodTypeDef, unknown> = z
        .object({
            workspaceId: z.string(),
        })
        .transform((v) => {
            return {
                workspaceId: v.workspaceId,
            };
        });

    export type Outbound = {
        workspaceId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RunApiStartGlobals> = z
        .object({
            workspaceId: z.string(),
        })
        .transform((v) => {
            return {
                workspaceId: v.workspaceId,
            };
        });
}

/** @internal */
export namespace RunApiStartRequest$ {
    export const inboundSchema: z.ZodType<RunApiStartRequest, z.ZodTypeDef, unknown> = z
        .object({
            projectName: z.string(),
            RunProjectApiRequest: components.RunProjectApiRequest$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                projectName: v.projectName,
                ...(v.RunProjectApiRequest === undefined
                    ? null
                    : { runProjectApiRequest: v.RunProjectApiRequest }),
            };
        });

    export type Outbound = {
        projectName: string;
        RunProjectApiRequest?: components.RunProjectApiRequest$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RunApiStartRequest> = z
        .object({
            projectName: z.string(),
            runProjectApiRequest: components.RunProjectApiRequest$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                projectName: v.projectName,
                ...(v.runProjectApiRequest === undefined
                    ? null
                    : { RunProjectApiRequest: v.runProjectApiRequest }),
            };
        });
}

/** @internal */
export namespace RunApiStartResponse$ {
    export const inboundSchema: z.ZodType<RunApiStartResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            AsyncRunPendingResponse: components.AsyncRunPendingResponse$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.AsyncRunPendingResponse === undefined
                    ? null
                    : { asyncRunPendingResponse: v.AsyncRunPendingResponse }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        AsyncRunPendingResponse?: components.AsyncRunPendingResponse$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RunApiStartResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            asyncRunPendingResponse: components.AsyncRunPendingResponse$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.asyncRunPendingResponse === undefined
                    ? null
                    : { AsyncRunPendingResponse: v.asyncRunPendingResponse }),
            };
        });
}
