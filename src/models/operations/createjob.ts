/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type CreateJobGlobals = {
    /**
     * Project Name.
     */
    projectName?: string | undefined;
    /**
     * Workspace Id.
     */
    workspaceId?: string | undefined;
};

export type CreateJobRequest = {
    /**
     * Project name
     */
    projectName?: string | undefined;
    /**
     * create job request
     */
    jobInput: components.JobInput;
};

export enum Message {
    Created = "created",
}

/**
 * Successful operation
 */
export type CreateJobResponseBody = {
    id?: string | undefined;
    message?: Message | undefined;
};

export type CreateJobResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Successful operation
     */
    object?: CreateJobResponseBody | undefined;
};

/** @internal */
export namespace CreateJobGlobals$ {
    export const inboundSchema: z.ZodType<CreateJobGlobals, z.ZodTypeDef, unknown> = z
        .object({
            projectName: z.string().optional(),
            workspaceId: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.projectName === undefined ? null : { projectName: v.projectName }),
                ...(v.workspaceId === undefined ? null : { workspaceId: v.workspaceId }),
            };
        });

    export type Outbound = {
        projectName?: string | undefined;
        workspaceId?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateJobGlobals> = z
        .object({
            projectName: z.string().optional(),
            workspaceId: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.projectName === undefined ? null : { projectName: v.projectName }),
                ...(v.workspaceId === undefined ? null : { workspaceId: v.workspaceId }),
            };
        });
}

/** @internal */
export namespace CreateJobRequest$ {
    export const inboundSchema: z.ZodType<CreateJobRequest, z.ZodTypeDef, unknown> = z
        .object({
            projectName: z.string().optional(),
            JobInput: components.JobInput$.inboundSchema,
        })
        .transform((v) => {
            return {
                ...(v.projectName === undefined ? null : { projectName: v.projectName }),
                jobInput: v.JobInput,
            };
        });

    export type Outbound = {
        projectName?: string | undefined;
        JobInput: components.JobInput$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateJobRequest> = z
        .object({
            projectName: z.string().optional(),
            jobInput: components.JobInput$.outboundSchema,
        })
        .transform((v) => {
            return {
                ...(v.projectName === undefined ? null : { projectName: v.projectName }),
                JobInput: v.jobInput,
            };
        });
}

/** @internal */
export namespace Message$ {
    export const inboundSchema = z.nativeEnum(Message);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace CreateJobResponseBody$ {
    export const inboundSchema: z.ZodType<CreateJobResponseBody, z.ZodTypeDef, unknown> = z
        .object({
            id: z.string().optional(),
            message: Message$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.message === undefined ? null : { message: v.message }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        message?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateJobResponseBody> = z
        .object({
            id: z.string().optional(),
            message: Message$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.message === undefined ? null : { message: v.message }),
            };
        });
}

/** @internal */
export namespace CreateJobResponse$ {
    export const inboundSchema: z.ZodType<CreateJobResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            object: z.lazy(() => CreateJobResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        object?: CreateJobResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateJobResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            object: z.lazy(() => CreateJobResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
