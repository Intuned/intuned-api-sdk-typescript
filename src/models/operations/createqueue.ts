/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as components from "../components";
import * as z from "zod";

export type CreateQueueGlobals = {
    /**
     * Your workspace ID. [How to find it](https://docs.intunedhq.com/docs/management/workspace#finding-your-workspace-id)?
     */
    workspaceId: string;
};

export type CreateQueueRequest = {
    /**
     * Your project name. It is the name you provide when creating a project.
     */
    projectName: string;
    /**
     * create queue request
     */
    queueInput: components.QueueInput;
};

export type CreateQueueResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Successfully created
     */
    createQueue?: components.CreateQueue | undefined;
};

/** @internal */
export namespace CreateQueueGlobals$ {
    export const inboundSchema: z.ZodType<CreateQueueGlobals, z.ZodTypeDef, unknown> = z.object({
        workspaceId: z.string(),
    });

    export type Outbound = {
        workspaceId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateQueueGlobals> = z.object({
        workspaceId: z.string(),
    });
}

/** @internal */
export namespace CreateQueueRequest$ {
    export const inboundSchema: z.ZodType<CreateQueueRequest, z.ZodTypeDef, unknown> = z
        .object({
            projectName: z.string(),
            QueueInput: components.QueueInput$.inboundSchema,
        })
        .transform((v) => {
            return remap$(v, {
                QueueInput: "queueInput",
            });
        });

    export type Outbound = {
        projectName: string;
        QueueInput: components.QueueInput$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateQueueRequest> = z
        .object({
            projectName: z.string(),
            queueInput: components.QueueInput$.outboundSchema,
        })
        .transform((v) => {
            return remap$(v, {
                queueInput: "QueueInput",
            });
        });
}

/** @internal */
export namespace CreateQueueResponse$ {
    export const inboundSchema: z.ZodType<CreateQueueResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            CreateQueue: components.CreateQueue$.inboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                HttpMeta: "httpMeta",
                CreateQueue: "createQueue",
            });
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        CreateQueue?: components.CreateQueue$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateQueueResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            createQueue: components.CreateQueue$.outboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                httpMeta: "HttpMeta",
                createQueue: "CreateQueue",
            });
        });
}
