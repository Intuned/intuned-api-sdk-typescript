/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks";
import { SDKOptions, serverURLFromOptions } from "../lib/config";
import { HTTPClient } from "../lib/http";
import { ClientSDK } from "../lib/sdks";
import { AuthSessions } from "./authsessions";
import { Files } from "./files";
import { Project } from "./project";

export class IntunedApiSDK extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    private _files?: Files;
    get files(): Files {
        return (this._files ??= new Files(this.options$));
    }

    private _project?: Project;
    get project(): Project {
        return (this._project ??= new Project(this.options$));
    }

    private _authSessions?: AuthSessions;
    get authSessions(): AuthSessions {
        return (this._authSessions ??= new AuthSessions(this.options$));
    }
}
