/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks/hooks.js";
import { SDKOptions, serverURLFromOptions } from "../lib/config.js";
import { encodeJSON as encodeJSON$, encodeSimple as encodeSimple$ } from "../lib/encodings.js";
import { HTTPClient } from "../lib/http.js";
import * as schemas$ from "../lib/schemas.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as errors from "../models/errors/index.js";
import * as operations from "../models/operations/index.js";

export class Create extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    /**
     * Create Auth Session - Start
     *
     * @remarks
     * Starts creation process of an authentication session for a project with the authentication session creation setting enabled.
     */
    async start(
        projectName: string,
        createAuthSessionRequest: components.CreateAuthSessionRequest,
        options?: RequestOptions
    ): Promise<components.CreateAuthSessionStart> {
        const input$: operations.CreateAuthSessionStartRequest = {
            projectName: projectName,
            createAuthSessionRequest: createAuthSessionRequest,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.CreateAuthSessionStartRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$.CreateAuthSessionRequest, { explode: true });

        const pathParams$ = {
            projectName: encodeSimple$("projectName", payload$.projectName, {
                explode: false,
                charEncoding: "percent",
            }),
            workspaceId: encodeSimple$("workspaceId", this.options$.workspaceId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent(
            "/{workspaceId}/projects/{projectName}/auth-sessions/create"
        )(pathParams$);

        const query$ = "";

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.apiKey === "function") {
            security$ = { apiKey: await this.options$.apiKey() };
        } else if (this.options$.apiKey) {
            security$ = { apiKey: this.options$.apiKey };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "createAuthSessionStart",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKey,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["400", "401", "404", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<components.CreateAuthSessionStart>()
            .json(201, components.CreateAuthSessionStart$inboundSchema)
            .json(400, errors.ApiErrorInvalidInput$inboundSchema, { err: true })
            .json(401, errors.ApiErrorUnauthorized$inboundSchema, { err: true })
            .fail([404, "4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Create Auth Session - Result
     *
     * @remarks
     * Gets authentication session creation operation result.
     */
    async result(
        projectName: string,
        operationId: string,
        options?: RequestOptions
    ): Promise<components.AuthSessionCreateResult> {
        const input$: operations.CreateAuthSessionResultRequest = {
            projectName: projectName,
            operationId: operationId,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.CreateAuthSessionResultRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            operationId: encodeSimple$("operationId", payload$.operationId, {
                explode: false,
                charEncoding: "percent",
            }),
            projectName: encodeSimple$("projectName", payload$.projectName, {
                explode: false,
                charEncoding: "percent",
            }),
            workspaceId: encodeSimple$("workspaceId", this.options$.workspaceId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent(
            "/{workspaceId}/projects/{projectName}/auth-sessions/create/{operationId}/result"
        )(pathParams$);

        const query$ = "";

        const headers$ = new Headers({
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.apiKey === "function") {
            security$ = { apiKey: await this.options$.apiKey() };
        } else if (this.options$.apiKey) {
            security$ = { apiKey: this.options$.apiKey };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "createAuthSessionResult",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKey,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["400", "401", "404", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<components.AuthSessionCreateResult>()
            .json(200, components.AuthSessionCreateResult$inboundSchema)
            .json(400, errors.ApiErrorInvalidInput$inboundSchema, { err: true })
            .json(401, errors.ApiErrorUnauthorized$inboundSchema, { err: true })
            .fail([404, "4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Create Auth Session -  Resume
     *
     * @remarks
     * Resume authentication session creation operation. This is needed if the operation requests more info.
     */
    async resume(
        projectName: string,
        operationId: string,
        authSessionCreateResume: components.AuthSessionCreateResume,
        options?: RequestOptions
    ): Promise<components.CreateAuthSessionResume> {
        const input$: operations.CreateAuthSessionResumeRequest = {
            projectName: projectName,
            operationId: operationId,
            authSessionCreateResume: authSessionCreateResume,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.CreateAuthSessionResumeRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$.AuthSessionCreateResume, { explode: true });

        const pathParams$ = {
            operationId: encodeSimple$("operationId", payload$.operationId, {
                explode: false,
                charEncoding: "percent",
            }),
            projectName: encodeSimple$("projectName", payload$.projectName, {
                explode: false,
                charEncoding: "percent",
            }),
            workspaceId: encodeSimple$("workspaceId", this.options$.workspaceId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent(
            "/{workspaceId}/projects/{projectName}/auth-sessions/create/{operationId}/resume"
        )(pathParams$);

        const query$ = "";

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.apiKey === "function") {
            security$ = { apiKey: await this.options$.apiKey() };
        } else if (this.options$.apiKey) {
            security$ = { apiKey: this.options$.apiKey };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "createAuthSessionResume",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKey,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["400", "401", "404", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<components.CreateAuthSessionResume>()
            .json(202, components.CreateAuthSessionResume$inboundSchema)
            .json(400, errors.ApiErrorInvalidInput$inboundSchema, { err: true })
            .json(401, errors.ApiErrorUnauthorized$inboundSchema, { err: true })
            .fail([404, "4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }
}
