/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks";
import { SDK_METADATA, SDKOptions, serverURLFromOptions } from "../lib/config";
import * as enc$ from "../lib/encodings";
import { HTTPClient } from "../lib/http";
import * as schemas$ from "../lib/schemas";
import { ClientSDK, RequestOptions } from "../lib/sdks";
import * as components from "../models/components";
import * as errors from "../models/errors";
import * as operations from "../models/operations";

export class Items extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    /**
     * Append Queue Item
     *
     * @remarks
     * Appends an item to the queue.
     */
    async append(
        projectName: string,
        queueId: string,
        queueItem: components.QueueItem,
        options?: RequestOptions
    ): Promise<operations.AppendQueueItemResponse> {
        const input$: operations.AppendQueueItemRequest = {
            projectName: projectName,
            queueId: queueId,
            queueItem: queueItem,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.AppendQueueItemRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = enc$.encodeJSON("body", payload$.QueueItem, { explode: true });

        const pathParams$ = {
            projectName: enc$.encodeSimple("projectName", payload$.projectName, {
                explode: false,
                charEncoding: "percent",
            }),
            queueId: enc$.encodeSimple("queueId", payload$.queueId, {
                explode: false,
                charEncoding: "percent",
            }),
            workspaceId: enc$.encodeSimple("workspaceId", this.options$.workspaceId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent(
            "/{workspaceId}/projects/{projectName}/queues/{queueId}/items"
        )(pathParams$);

        const query$ = "";

        let security$;
        if (typeof this.options$.apiKey === "function") {
            security$ = { apiKey: await this.options$.apiKey() };
        } else if (this.options$.apiKey) {
            security$ = { apiKey: this.options$.apiKey };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "appendQueueItem",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKey,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["400", "401", "404", "4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<operations.AppendQueueItemResponse>()
            .json(200, operations.AppendQueueItemResponse$, { key: "AddQueueItem" })
            .json(400, errors.ApiErrorInvalidInput$, { err: true })
            .json(401, errors.ApiErrorUnauthorized$, { err: true })
            .fail([404, "4XX", "5XX"])
            .match(response, request$, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Get Queue Item result
     *
     * @remarks
     * Get queue item result.
     */
    async result(
        projectName: string,
        queueId: string,
        itemRunId: string,
        options?: RequestOptions
    ): Promise<operations.GetQueueItemResultResponse> {
        const input$: operations.GetQueueItemResultRequest = {
            projectName: projectName,
            queueId: queueId,
            itemRunId: itemRunId,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.GetQueueItemResultRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            itemRunId: enc$.encodeSimple("itemRunId", payload$.itemRunId, {
                explode: false,
                charEncoding: "percent",
            }),
            projectName: enc$.encodeSimple("projectName", payload$.projectName, {
                explode: false,
                charEncoding: "percent",
            }),
            queueId: enc$.encodeSimple("queueId", payload$.queueId, {
                explode: false,
                charEncoding: "percent",
            }),
            workspaceId: enc$.encodeSimple("workspaceId", this.options$.workspaceId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent(
            "/{workspaceId}/projects/{projectName}/queues/{queueId}/items/{itemRunId}"
        )(pathParams$);

        const query$ = "";

        let security$;
        if (typeof this.options$.apiKey === "function") {
            security$ = { apiKey: await this.options$.apiKey() };
        } else if (this.options$.apiKey) {
            security$ = { apiKey: this.options$.apiKey };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "getQueueItemResult",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKey,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["400", "401", "404", "4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<operations.GetQueueItemResultResponse>()
            .json(200, operations.GetQueueItemResultResponse$, { key: "QueueItemResult" })
            .json(400, errors.ApiErrorInvalidInput$, { err: true })
            .json(401, errors.ApiErrorUnauthorized$, { err: true })
            .fail([404, "4XX", "5XX"])
            .match(response, request$, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Delete Queue item
     *
     * @remarks
     * Delete queued item. If the item is currently processing, the delete will fail.
     */
    async delete(
        projectName: string,
        queueId: string,
        itemRunId: string,
        options?: RequestOptions
    ): Promise<operations.DeleteQueueItemResponse> {
        const input$: operations.DeleteQueueItemRequest = {
            projectName: projectName,
            queueId: queueId,
            itemRunId: itemRunId,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.DeleteQueueItemRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            itemRunId: enc$.encodeSimple("itemRunId", payload$.itemRunId, {
                explode: false,
                charEncoding: "percent",
            }),
            projectName: enc$.encodeSimple("projectName", payload$.projectName, {
                explode: false,
                charEncoding: "percent",
            }),
            queueId: enc$.encodeSimple("queueId", payload$.queueId, {
                explode: false,
                charEncoding: "percent",
            }),
            workspaceId: enc$.encodeSimple("workspaceId", this.options$.workspaceId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent(
            "/{workspaceId}/projects/{projectName}/queues/{queueId}/items/{itemRunId}"
        )(pathParams$);

        const query$ = "";

        let security$;
        if (typeof this.options$.apiKey === "function") {
            security$ = { apiKey: await this.options$.apiKey() };
        } else if (this.options$.apiKey) {
            security$ = { apiKey: this.options$.apiKey };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "deleteQueueItem",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKey,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["400", "401", "404", "4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "DELETE",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<operations.DeleteQueueItemResponse>()
            .void(204, operations.DeleteQueueItemResponse$)
            .json(400, errors.ApiErrorInvalidInput$, { err: true })
            .json(401, errors.ApiErrorUnauthorized$, { err: true })
            .fail([404, "4XX", "5XX"])
            .match(response, request$, { extraFields: responseFields$ });

        return result$;
    }
}
