/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks";
import { SDK_METADATA, SDKOptions, serverURLFromOptions } from "../lib/config";
import * as enc$ from "../lib/encodings";
import { HTTPClient } from "../lib/http";
import * as schemas$ from "../lib/schemas";
import { ClientSDK, RequestOptions } from "../lib/sdks";
import * as components from "../models/components";
import * as errors from "../models/errors";
import * as operations from "../models/operations";

export class AuthSessions extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    /**
     * Get Auth Sessions
     *
     * @remarks
     * Gets all authentication sessions of project
     */
    async getAuthSessions(
        projectName?: string | undefined,
        options?: RequestOptions
    ): Promise<operations.GetAuthSessionsResponse> {
        const input$: operations.GetAuthSessionsRequest = {
            projectName: projectName,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.GetAuthSessionsRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            projectName: enc$.encodeSimple(
                "projectName",
                payload$.projectName ?? this.options$.projectName,
                { explode: false, charEncoding: "percent" }
            ),
            workspaceId: enc$.encodeSimple("workspaceId", this.options$.workspaceId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent(
            "/{workspaceId}/projects/{projectName}/auth-sessions"
        )(pathParams$);

        const query$ = "";

        let security$;
        if (typeof this.options$.apiKey === "function") {
            security$ = { apiKey: await this.options$.apiKey() };
        } else if (this.options$.apiKey) {
            security$ = { apiKey: this.options$.apiKey };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "getAuthSessions",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKey,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["400", "401", "404", "4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<operations.GetAuthSessionsResponse>()
            .json(200, operations.GetAuthSessionsResponse$, { key: "GetAuthSessions" })
            .json(400, errors.ApiErrorInvalidInput$, { err: true })
            .json(401, errors.ApiErrorUnauthorized$, { err: true })
            .fail([404, "4XX", "5XX"])
            .match(response, request$, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Get Auth Session
     *
     * @remarks
     * Gets authentication session of project by ID
     */
    async getAuthSession(
        authSessionId: string,
        projectName?: string | undefined,
        options?: RequestOptions
    ): Promise<operations.GetAuthSessionResponse> {
        const input$: operations.GetAuthSessionRequest = {
            projectName: projectName,
            authSessionId: authSessionId,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.GetAuthSessionRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            authSessionId: enc$.encodeSimple("authSessionId", payload$.authSessionId, {
                explode: false,
                charEncoding: "percent",
            }),
            projectName: enc$.encodeSimple(
                "projectName",
                payload$.projectName ?? this.options$.projectName,
                { explode: false, charEncoding: "percent" }
            ),
            workspaceId: enc$.encodeSimple("workspaceId", this.options$.workspaceId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent(
            "/{workspaceId}/projects/{projectName}/auth-sessions/{authSessionId}"
        )(pathParams$);

        const query$ = "";

        let security$;
        if (typeof this.options$.apiKey === "function") {
            security$ = { apiKey: await this.options$.apiKey() };
        } else if (this.options$.apiKey) {
            security$ = { apiKey: this.options$.apiKey };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "getAuthSession",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKey,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["400", "401", "404", "4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<operations.GetAuthSessionResponse>()
            .json(200, operations.GetAuthSessionResponse$, { key: "AuthSessionInfo" })
            .json(400, errors.ApiErrorInvalidInput$, { err: true })
            .json(401, errors.ApiErrorUnauthorized$, { err: true })
            .fail([404, "4XX", "5XX"])
            .match(response, request$, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Delete Auth Session
     *
     * @remarks
     * Deletes an authentication session by ID.
     */
    async deleteAuthSession(
        authSessionId: string,
        projectName?: string | undefined,
        options?: RequestOptions
    ): Promise<operations.DeleteAuthSessionResponse> {
        const input$: operations.DeleteAuthSessionRequest = {
            projectName: projectName,
            authSessionId: authSessionId,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.DeleteAuthSessionRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            authSessionId: enc$.encodeSimple("authSessionId", payload$.authSessionId, {
                explode: false,
                charEncoding: "percent",
            }),
            projectName: enc$.encodeSimple(
                "projectName",
                payload$.projectName ?? this.options$.projectName,
                { explode: false, charEncoding: "percent" }
            ),
            workspaceId: enc$.encodeSimple("workspaceId", this.options$.workspaceId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent(
            "/{workspaceId}/projects/{projectName}/auth-sessions/{authSessionId}"
        )(pathParams$);

        const query$ = "";

        let security$;
        if (typeof this.options$.apiKey === "function") {
            security$ = { apiKey: await this.options$.apiKey() };
        } else if (this.options$.apiKey) {
            security$ = { apiKey: this.options$.apiKey };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "deleteAuthSession",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKey,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["400", "401", "404", "4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "DELETE",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<operations.DeleteAuthSessionResponse>()
            .json(204, operations.DeleteAuthSessionResponse$, { key: "DeleteAuthSession" })
            .json(400, errors.ApiErrorInvalidInput$, { err: true })
            .json(401, errors.ApiErrorUnauthorized$, { err: true })
            .fail([404, "4XX", "5XX"])
            .match(response, request$, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Start create Auth Session
     *
     * @remarks
     * Starts creation process of an authentication session for a project with the authentication session creation setting enabled.
     */
    async createAuthSession(
        projectName?: string | undefined,
        options?: RequestOptions
    ): Promise<operations.CreateAuthSessionResponse> {
        const input$: operations.CreateAuthSessionRequest = {
            projectName: projectName,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.CreateAuthSessionRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            projectName: enc$.encodeSimple(
                "projectName",
                payload$.projectName ?? this.options$.projectName,
                { explode: false, charEncoding: "percent" }
            ),
            workspaceId: enc$.encodeSimple("workspaceId", this.options$.workspaceId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent(
            "/{workspaceId}/projects/{projectName}/auth-sessions/create"
        )(pathParams$);

        const query$ = "";

        let security$;
        if (typeof this.options$.apiKey === "function") {
            security$ = { apiKey: await this.options$.apiKey() };
        } else if (this.options$.apiKey) {
            security$ = { apiKey: this.options$.apiKey };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "createAuthSession",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKey,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["400", "401", "404", "4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<operations.CreateAuthSessionResponse>()
            .json(200, operations.CreateAuthSessionResponse$, { key: "CreateAuthSessionStart" })
            .json(400, errors.ApiErrorInvalidInput$, { err: true })
            .json(401, errors.ApiErrorUnauthorized$, { err: true })
            .fail([404, "4XX", "5XX"])
            .match(response, request$, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Get create Auth Session result
     *
     * @remarks
     * Gets authentication session creation operation result.
     */
    async getCreateAuthSessionResult(
        authSessionId: string,
        projectName?: string | undefined,
        options?: RequestOptions
    ): Promise<operations.GetCreateAuthSessionResultResponse> {
        const input$: operations.GetCreateAuthSessionResultRequest = {
            projectName: projectName,
            authSessionId: authSessionId,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.GetCreateAuthSessionResultRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            authSessionId: enc$.encodeSimple("authSessionId", payload$.authSessionId, {
                explode: false,
                charEncoding: "percent",
            }),
            projectName: enc$.encodeSimple(
                "projectName",
                payload$.projectName ?? this.options$.projectName,
                { explode: false, charEncoding: "percent" }
            ),
            workspaceId: enc$.encodeSimple("workspaceId", this.options$.workspaceId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent(
            "/{workspaceId}/projects/{projectName}/auth-sessions/create/{authSessionId}/result"
        )(pathParams$);

        const query$ = "";

        let security$;
        if (typeof this.options$.apiKey === "function") {
            security$ = { apiKey: await this.options$.apiKey() };
        } else if (this.options$.apiKey) {
            security$ = { apiKey: this.options$.apiKey };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "getCreateAuthSessionResult",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKey,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["400", "401", "404", "4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<operations.GetCreateAuthSessionResultResponse>()
            .json(200, operations.GetCreateAuthSessionResultResponse$, {
                key: "AuthSessionCreateResult",
            })
            .json(400, errors.ApiErrorInvalidInput$, { err: true })
            .json(401, errors.ApiErrorUnauthorized$, { err: true })
            .fail([404, "4XX", "5XX"])
            .match(response, request$, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Resume create Auth Session
     *
     * @remarks
     * Resume authentication session creation operation. This is needed if the operation requests more info.
     */
    async resumeCreateAuthSession(
        authSessionId: string,
        projectName?: string | undefined,
        authSessionCreateResume?: components.AuthSessionCreateResume | undefined,
        options?: RequestOptions
    ): Promise<operations.ResumeCreateAuthSessionResponse> {
        const input$: operations.ResumeCreateAuthSessionRequest = {
            projectName: projectName,
            authSessionId: authSessionId,
            authSessionCreateResume: authSessionCreateResume,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.ResumeCreateAuthSessionRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = enc$.encodeJSON("body", payload$.AuthSessionCreateResume, { explode: true });

        const pathParams$ = {
            authSessionId: enc$.encodeSimple("authSessionId", payload$.authSessionId, {
                explode: false,
                charEncoding: "percent",
            }),
            projectName: enc$.encodeSimple(
                "projectName",
                payload$.projectName ?? this.options$.projectName,
                { explode: false, charEncoding: "percent" }
            ),
            workspaceId: enc$.encodeSimple("workspaceId", this.options$.workspaceId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent(
            "/{workspaceId}/projects/{projectName}/auth-sessions/create/{authSessionId}/resume"
        )(pathParams$);

        const query$ = "";

        let security$;
        if (typeof this.options$.apiKey === "function") {
            security$ = { apiKey: await this.options$.apiKey() };
        } else if (this.options$.apiKey) {
            security$ = { apiKey: this.options$.apiKey };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "resumeCreateAuthSession",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKey,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["400", "401", "404", "4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<operations.ResumeCreateAuthSessionResponse>()
            .json(201, operations.ResumeCreateAuthSessionResponse$, {
                key: "CreateAuthSessionResume",
            })
            .json(400, errors.ApiErrorInvalidInput$, { err: true })
            .json(401, errors.ApiErrorUnauthorized$, { err: true })
            .fail([404, "4XX", "5XX"])
            .match(response, request$, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Refresh Auth Session
     *
     * @remarks
     * Refreshes an expired authentication session.
     */
    async refreshAuthSession(
        projectName?: string | undefined,
        options?: RequestOptions
    ): Promise<operations.RefreshAuthSessionResponse> {
        const input$: operations.RefreshAuthSessionRequest = {
            projectName: projectName,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.RefreshAuthSessionRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            projectName: enc$.encodeSimple(
                "projectName",
                payload$.projectName ?? this.options$.projectName,
                { explode: false, charEncoding: "percent" }
            ),
            workspaceId: enc$.encodeSimple("workspaceId", this.options$.workspaceId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent(
            "/{workspaceId}/projects/{projectName}/auth-sessions/refresh"
        )(pathParams$);

        const query$ = "";

        let security$;
        if (typeof this.options$.apiKey === "function") {
            security$ = { apiKey: await this.options$.apiKey() };
        } else if (this.options$.apiKey) {
            security$ = { apiKey: this.options$.apiKey };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "refreshAuthSession",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKey,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["400", "401", "404", "4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<operations.RefreshAuthSessionResponse>()
            .json(200, operations.RefreshAuthSessionResponse$, { key: "RefreshAuthSession" })
            .json(400, errors.ApiErrorInvalidInput$, { err: true })
            .json(401, errors.ApiErrorUnauthorized$, { err: true })
            .fail([404, "4XX", "5XX"])
            .match(response, request$, { extraFields: responseFields$ });

        return result$;
    }
}
