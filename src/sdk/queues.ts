/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks";
import { SDK_METADATA, SDKOptions, serverURLFromOptions } from "../lib/config";
import * as enc$ from "../lib/encodings";
import { HTTPClient } from "../lib/http";
import * as schemas$ from "../lib/schemas";
import { ClientSDK, RequestOptions } from "../lib/sdks";
import * as components from "../models/components";
import * as errors from "../models/errors";
import * as operations from "../models/operations";

export class Queues extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    /**
     * Get all queues in a project.
     *
     * @remarks
     * Gets all queues in a project.
     */
    async getQueues(
        projectName?: string | undefined,
        options?: RequestOptions
    ): Promise<operations.GetQueuesResponse> {
        const input$: operations.GetQueuesRequest = {
            projectName: projectName,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.GetQueuesRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            projectName: enc$.encodeSimple(
                "projectName",
                payload$.projectName ?? this.options$.projectName,
                { explode: false, charEncoding: "percent" }
            ),
            workspaceId: enc$.encodeSimple("workspaceId", this.options$.workspaceId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/{workspaceId}/projects/{projectName}/queues")(
            pathParams$
        );

        const query$ = "";

        let security$;
        if (typeof this.options$.apiKey === "function") {
            security$ = { apiKey: await this.options$.apiKey() };
        } else if (this.options$.apiKey) {
            security$ = { apiKey: this.options$.apiKey };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "getQueues",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKey,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["400", "401", "404", "4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<operations.GetQueuesResponse>()
            .json(200, operations.GetQueuesResponse$, { key: "QueueInputs" })
            .json(400, errors.ApiErrorInvalidInput$, { err: true })
            .json(401, errors.ApiErrorUnauthorized$, { err: true })
            .fail([404, "4XX", "5XX"])
            .match(response, request$, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Create a new queue for a project.
     *
     * @remarks
     * Creates a new queue.
     */
    async createQueue(
        projectName?: string | undefined,
        queueInput?: components.QueueInput | undefined,
        options?: RequestOptions
    ): Promise<operations.CreateQueueResponse> {
        const input$: operations.CreateQueueRequest = {
            projectName: projectName,
            queueInput: queueInput,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.CreateQueueRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = enc$.encodeJSON("body", payload$.QueueInput, { explode: true });

        const pathParams$ = {
            projectName: enc$.encodeSimple(
                "projectName",
                payload$.projectName ?? this.options$.projectName,
                { explode: false, charEncoding: "percent" }
            ),
            workspaceId: enc$.encodeSimple("workspaceId", this.options$.workspaceId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/{workspaceId}/projects/{projectName}/queues")(
            pathParams$
        );

        const query$ = "";

        let security$;
        if (typeof this.options$.apiKey === "function") {
            security$ = { apiKey: await this.options$.apiKey() };
        } else if (this.options$.apiKey) {
            security$ = { apiKey: this.options$.apiKey };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "createQueue",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKey,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["400", "401", "404", "4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<operations.CreateQueueResponse>()
            .json(201, operations.CreateQueueResponse$, { key: "object" })
            .json(400, errors.ApiErrorInvalidInput$, { err: true })
            .json(401, errors.ApiErrorUnauthorized$, { err: true })
            .fail([404, "4XX", "5XX"])
            .match(response, request$, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Get a queue in a project by ID.
     *
     * @remarks
     * Gets a queue in a project by ID.
     */
    async getQueue(
        queueId: string,
        projectName?: string | undefined,
        options?: RequestOptions
    ): Promise<operations.GetQueueResponse> {
        const input$: operations.GetQueueRequest = {
            projectName: projectName,
            queueId: queueId,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.GetQueueRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            projectName: enc$.encodeSimple(
                "projectName",
                payload$.projectName ?? this.options$.projectName,
                { explode: false, charEncoding: "percent" }
            ),
            queueId: enc$.encodeSimple("queueId", payload$.queueId, {
                explode: false,
                charEncoding: "percent",
            }),
            workspaceId: enc$.encodeSimple("workspaceId", this.options$.workspaceId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent(
            "/{workspaceId}/projects/{projectName}/queues/{queueId}"
        )(pathParams$);

        const query$ = "";

        let security$;
        if (typeof this.options$.apiKey === "function") {
            security$ = { apiKey: await this.options$.apiKey() };
        } else if (this.options$.apiKey) {
            security$ = { apiKey: this.options$.apiKey };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "getQueue",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKey,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["400", "401", "404", "4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<operations.GetQueueResponse>()
            .json(200, operations.GetQueueResponse$, { key: "QueueInput" })
            .json(400, errors.ApiErrorInvalidInput$, { err: true })
            .json(401, errors.ApiErrorUnauthorized$, { err: true })
            .fail([404, "4XX", "5XX"])
            .match(response, request$, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Delete a queue of a project by ID.
     *
     * @remarks
     * Deletes a queue by ID.
     */
    async deleteQueue(
        queueId: string,
        projectName?: string | undefined,
        options?: RequestOptions
    ): Promise<operations.DeleteQueueResponse> {
        const input$: operations.DeleteQueueRequest = {
            projectName: projectName,
            queueId: queueId,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.DeleteQueueRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            projectName: enc$.encodeSimple(
                "projectName",
                payload$.projectName ?? this.options$.projectName,
                { explode: false, charEncoding: "percent" }
            ),
            queueId: enc$.encodeSimple("queueId", payload$.queueId, {
                explode: false,
                charEncoding: "percent",
            }),
            workspaceId: enc$.encodeSimple("workspaceId", this.options$.workspaceId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent(
            "/{workspaceId}/projects/{projectName}/queues/{queueId}"
        )(pathParams$);

        const query$ = "";

        let security$;
        if (typeof this.options$.apiKey === "function") {
            security$ = { apiKey: await this.options$.apiKey() };
        } else if (this.options$.apiKey) {
            security$ = { apiKey: this.options$.apiKey };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "deleteQueue",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKey,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["401", "404", "4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "DELETE",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<operations.DeleteQueueResponse>()
            .json(204, operations.DeleteQueueResponse$, { key: "object" })
            .json(401, errors.ApiErrorUnauthorized$, { err: true })
            .fail([404, "4XX", "5XX"])
            .match(response, request$, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Append an item to the queue.
     *
     * @remarks
     * Appends an item to the queue.
     */
    async addItem(
        queueId: string,
        projectName?: string | undefined,
        queueItem?: components.QueueItem | undefined,
        options?: RequestOptions
    ): Promise<operations.AddItemResponse> {
        const input$: operations.AddItemRequest = {
            projectName: projectName,
            queueId: queueId,
            queueItem: queueItem,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.AddItemRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = enc$.encodeJSON("body", payload$.QueueItem, { explode: true });

        const pathParams$ = {
            projectName: enc$.encodeSimple(
                "projectName",
                payload$.projectName ?? this.options$.projectName,
                { explode: false, charEncoding: "percent" }
            ),
            queueId: enc$.encodeSimple("queueId", payload$.queueId, {
                explode: false,
                charEncoding: "percent",
            }),
            workspaceId: enc$.encodeSimple("workspaceId", this.options$.workspaceId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent(
            "/{workspaceId}/projects/{projectName}/queues/{queueId}/items"
        )(pathParams$);

        const query$ = "";

        let security$;
        if (typeof this.options$.apiKey === "function") {
            security$ = { apiKey: await this.options$.apiKey() };
        } else if (this.options$.apiKey) {
            security$ = { apiKey: this.options$.apiKey };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "addItem",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKey,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["400", "401", "404", "4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<operations.AddItemResponse>()
            .json(200, operations.AddItemResponse$, { key: "object" })
            .json(400, errors.ApiErrorInvalidInput$, { err: true })
            .json(401, errors.ApiErrorUnauthorized$, { err: true })
            .fail([404, "4XX", "5XX"])
            .match(response, request$, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Get queue item result.
     *
     * @remarks
     * Get queue item result.
     */
    async getQueueItemResult(
        queueId: string,
        itemRunId: string,
        projectName?: string | undefined,
        options?: RequestOptions
    ): Promise<operations.GetQueueItemResultResponse> {
        const input$: operations.GetQueueItemResultRequest = {
            projectName: projectName,
            queueId: queueId,
            itemRunId: itemRunId,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.GetQueueItemResultRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            itemRunId: enc$.encodeSimple("itemRunId", payload$.itemRunId, {
                explode: false,
                charEncoding: "percent",
            }),
            projectName: enc$.encodeSimple(
                "projectName",
                payload$.projectName ?? this.options$.projectName,
                { explode: false, charEncoding: "percent" }
            ),
            queueId: enc$.encodeSimple("queueId", payload$.queueId, {
                explode: false,
                charEncoding: "percent",
            }),
            workspaceId: enc$.encodeSimple("workspaceId", this.options$.workspaceId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent(
            "/{workspaceId}/projects/{projectName}/queues/{queueId}/items/{itemRunId}"
        )(pathParams$);

        const query$ = "";

        let security$;
        if (typeof this.options$.apiKey === "function") {
            security$ = { apiKey: await this.options$.apiKey() };
        } else if (this.options$.apiKey) {
            security$ = { apiKey: this.options$.apiKey };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "getQueueItemResult",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKey,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["400", "401", "404", "4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<operations.GetQueueItemResultResponse>()
            .json(200, operations.GetQueueItemResultResponse$, { key: "QueueItemResult" })
            .json(400, errors.ApiErrorInvalidInput$, { err: true })
            .json(401, errors.ApiErrorUnauthorized$, { err: true })
            .fail([404, "4XX", "5XX"])
            .match(response, request$, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Delete queued item
     *
     * @remarks
     * Delete queued item.
     */
    async deleteQueueItem(
        queueId: string,
        itemRunId: string,
        projectName?: string | undefined,
        options?: RequestOptions
    ): Promise<operations.DeleteQueueItemResponse> {
        const input$: operations.DeleteQueueItemRequest = {
            projectName: projectName,
            queueId: queueId,
            itemRunId: itemRunId,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.DeleteQueueItemRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            itemRunId: enc$.encodeSimple("itemRunId", payload$.itemRunId, {
                explode: false,
                charEncoding: "percent",
            }),
            projectName: enc$.encodeSimple(
                "projectName",
                payload$.projectName ?? this.options$.projectName,
                { explode: false, charEncoding: "percent" }
            ),
            queueId: enc$.encodeSimple("queueId", payload$.queueId, {
                explode: false,
                charEncoding: "percent",
            }),
            workspaceId: enc$.encodeSimple("workspaceId", this.options$.workspaceId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent(
            "/{workspaceId}/projects/{projectName}/queues/{queueId}/items/{itemRunId}"
        )(pathParams$);

        const query$ = "";

        let security$;
        if (typeof this.options$.apiKey === "function") {
            security$ = { apiKey: await this.options$.apiKey() };
        } else if (this.options$.apiKey) {
            security$ = { apiKey: this.options$.apiKey };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "deleteQueueItem",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKey,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["400", "401", "404", "4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "DELETE",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<operations.DeleteQueueItemResponse>()
            .json(204, operations.DeleteQueueItemResponse$, { key: "object" })
            .json(400, errors.ApiErrorInvalidInput$, { err: true })
            .json(401, errors.ApiErrorUnauthorized$, { err: true })
            .fail([404, "4XX", "5XX"])
            .match(response, request$, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Get repeat items for the queue.
     *
     * @remarks
     * Appends an item to the queue.
     */
    async getRepeatItems(
        queueId: string,
        projectName?: string | undefined,
        options?: RequestOptions
    ): Promise<operations.GetRepeatItemsResponse> {
        const input$: operations.GetRepeatItemsRequest = {
            projectName: projectName,
            queueId: queueId,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.GetRepeatItemsRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            projectName: enc$.encodeSimple(
                "projectName",
                payload$.projectName ?? this.options$.projectName,
                { explode: false, charEncoding: "percent" }
            ),
            queueId: enc$.encodeSimple("queueId", payload$.queueId, {
                explode: false,
                charEncoding: "percent",
            }),
            workspaceId: enc$.encodeSimple("workspaceId", this.options$.workspaceId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent(
            "/{workspaceId}/projects/{projectName}/queues/{queueId}/repeatItems"
        )(pathParams$);

        const query$ = "";

        let security$;
        if (typeof this.options$.apiKey === "function") {
            security$ = { apiKey: await this.options$.apiKey() };
        } else if (this.options$.apiKey) {
            security$ = { apiKey: this.options$.apiKey };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "getRepeatItems",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKey,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["400", "401", "404", "4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<operations.GetRepeatItemsResponse>()
            .json(200, operations.GetRepeatItemsResponse$, { key: "QueueRepeatItems" })
            .json(400, errors.ApiErrorInvalidInput$, { err: true })
            .json(401, errors.ApiErrorUnauthorized$, { err: true })
            .fail([404, "4XX", "5XX"])
            .match(response, request$, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Create a repeat item for the queue.
     *
     * @remarks
     * Appends an item to the queue.
     */
    async addRepeatItem(
        queueId: string,
        projectName?: string | undefined,
        queueRepeatItemInput?: components.QueueRepeatItemInput | undefined,
        options?: RequestOptions
    ): Promise<operations.AddRepeatItemResponse> {
        const input$: operations.AddRepeatItemRequest = {
            projectName: projectName,
            queueId: queueId,
            queueRepeatItemInput: queueRepeatItemInput,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.AddRepeatItemRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = enc$.encodeJSON("body", payload$.QueueRepeatItemInput, { explode: true });

        const pathParams$ = {
            projectName: enc$.encodeSimple(
                "projectName",
                payload$.projectName ?? this.options$.projectName,
                { explode: false, charEncoding: "percent" }
            ),
            queueId: enc$.encodeSimple("queueId", payload$.queueId, {
                explode: false,
                charEncoding: "percent",
            }),
            workspaceId: enc$.encodeSimple("workspaceId", this.options$.workspaceId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent(
            "/{workspaceId}/projects/{projectName}/queues/{queueId}/repeatItems"
        )(pathParams$);

        const query$ = "";

        let security$;
        if (typeof this.options$.apiKey === "function") {
            security$ = { apiKey: await this.options$.apiKey() };
        } else if (this.options$.apiKey) {
            security$ = { apiKey: this.options$.apiKey };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "addRepeatItem",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKey,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["400", "401", "404", "4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<operations.AddRepeatItemResponse>()
            .json(200, operations.AddRepeatItemResponse$, { key: "object" })
            .json(400, errors.ApiErrorInvalidInput$, { err: true })
            .json(401, errors.ApiErrorUnauthorized$, { err: true })
            .fail([404, "4XX", "5XX"])
            .match(response, request$, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Get repeat queue item with last result.
     *
     * @remarks
     * Get queue repeatable item.
     */
    async getRepeatQueueItem(
        queueId: string,
        itemId: string,
        projectName?: string | undefined,
        options?: RequestOptions
    ): Promise<operations.GetRepeatQueueItemResponse> {
        const input$: operations.GetRepeatQueueItemRequest = {
            projectName: projectName,
            queueId: queueId,
            itemId: itemId,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.GetRepeatQueueItemRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            itemId: enc$.encodeSimple("itemId", payload$.itemId, {
                explode: false,
                charEncoding: "percent",
            }),
            projectName: enc$.encodeSimple(
                "projectName",
                payload$.projectName ?? this.options$.projectName,
                { explode: false, charEncoding: "percent" }
            ),
            queueId: enc$.encodeSimple("queueId", payload$.queueId, {
                explode: false,
                charEncoding: "percent",
            }),
            workspaceId: enc$.encodeSimple("workspaceId", this.options$.workspaceId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent(
            "/{workspaceId}/projects/{projectName}/queues/{queueId}/repeatItems/{itemId}"
        )(pathParams$);

        const query$ = "";

        let security$;
        if (typeof this.options$.apiKey === "function") {
            security$ = { apiKey: await this.options$.apiKey() };
        } else if (this.options$.apiKey) {
            security$ = { apiKey: this.options$.apiKey };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "getRepeatQueueItem",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKey,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["400", "401", "404", "4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<operations.GetRepeatQueueItemResponse>()
            .json(200, operations.GetRepeatQueueItemResponse$, { key: "QueueRepeatItem" })
            .json(400, errors.ApiErrorInvalidInput$, { err: true })
            .json(401, errors.ApiErrorUnauthorized$, { err: true })
            .fail([404, "4XX", "5XX"])
            .match(response, request$, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Update queue repeatable item
     *
     * @remarks
     * Update queue repeatable item.
     */
    async updateRepeatQueueItem(
        queueId: string,
        itemId: string,
        projectName?: string | undefined,
        queueRepeatItemInput?: components.QueueRepeatItemInput | undefined,
        options?: RequestOptions
    ): Promise<operations.UpdateRepeatQueueItemResponse> {
        const input$: operations.UpdateRepeatQueueItemRequest = {
            projectName: projectName,
            queueId: queueId,
            itemId: itemId,
            queueRepeatItemInput: queueRepeatItemInput,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.UpdateRepeatQueueItemRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = enc$.encodeJSON("body", payload$.QueueRepeatItemInput, { explode: true });

        const pathParams$ = {
            itemId: enc$.encodeSimple("itemId", payload$.itemId, {
                explode: false,
                charEncoding: "percent",
            }),
            projectName: enc$.encodeSimple(
                "projectName",
                payload$.projectName ?? this.options$.projectName,
                { explode: false, charEncoding: "percent" }
            ),
            queueId: enc$.encodeSimple("queueId", payload$.queueId, {
                explode: false,
                charEncoding: "percent",
            }),
            workspaceId: enc$.encodeSimple("workspaceId", this.options$.workspaceId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent(
            "/{workspaceId}/projects/{projectName}/queues/{queueId}/repeatItems/{itemId}"
        )(pathParams$);

        const query$ = "";

        let security$;
        if (typeof this.options$.apiKey === "function") {
            security$ = { apiKey: await this.options$.apiKey() };
        } else if (this.options$.apiKey) {
            security$ = { apiKey: this.options$.apiKey };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "updateRepeatQueueItem",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKey,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["400", "401", "404", "4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "PUT",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<operations.UpdateRepeatQueueItemResponse>()
            .json(204, operations.UpdateRepeatQueueItemResponse$, { key: "object" })
            .json(400, errors.ApiErrorInvalidInput$, { err: true })
            .json(401, errors.ApiErrorUnauthorized$, { err: true })
            .fail([404, "4XX", "5XX"])
            .match(response, request$, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Delete queued item
     *
     * @remarks
     * Delete queue repeatable item.
     */
    async deleteRepeatQueueItem(
        queueId: string,
        itemId: string,
        projectName?: string | undefined,
        options?: RequestOptions
    ): Promise<operations.DeleteRepeatQueueItemResponse> {
        const input$: operations.DeleteRepeatQueueItemRequest = {
            projectName: projectName,
            queueId: queueId,
            itemId: itemId,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.DeleteRepeatQueueItemRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            itemId: enc$.encodeSimple("itemId", payload$.itemId, {
                explode: false,
                charEncoding: "percent",
            }),
            projectName: enc$.encodeSimple(
                "projectName",
                payload$.projectName ?? this.options$.projectName,
                { explode: false, charEncoding: "percent" }
            ),
            queueId: enc$.encodeSimple("queueId", payload$.queueId, {
                explode: false,
                charEncoding: "percent",
            }),
            workspaceId: enc$.encodeSimple("workspaceId", this.options$.workspaceId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent(
            "/{workspaceId}/projects/{projectName}/queues/{queueId}/repeatItems/{itemId}"
        )(pathParams$);

        const query$ = "";

        let security$;
        if (typeof this.options$.apiKey === "function") {
            security$ = { apiKey: await this.options$.apiKey() };
        } else if (this.options$.apiKey) {
            security$ = { apiKey: this.options$.apiKey };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "deleteRepeatQueueItem",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKey,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["400", "401", "404", "4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "DELETE",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<operations.DeleteRepeatQueueItemResponse>()
            .json(204, operations.DeleteRepeatQueueItemResponse$, { key: "object" })
            .json(400, errors.ApiErrorInvalidInput$, { err: true })
            .json(401, errors.ApiErrorUnauthorized$, { err: true })
            .fail([404, "4XX", "5XX"])
            .match(response, request$, { extraFields: responseFields$ });

        return result$;
    }
}
