/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { projectQueuesAll } from "../funcs/projectQueuesAll.js";
import { projectQueuesCreate } from "../funcs/projectQueuesCreate.js";
import { projectQueuesDelete } from "../funcs/projectQueuesDelete.js";
import { projectQueuesOne } from "../funcs/projectQueuesOne.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import { unwrapAsync } from "../types/fp.js";
import { Items } from "./items.js";
import { RepeatItems } from "./repeatitems.js";

export class Queues extends ClientSDK {
    private _items?: Items;
    get items(): Items {
        return (this._items ??= new Items(this.options$));
    }

    private _repeatItems?: RepeatItems;
    get repeatItems(): RepeatItems {
        return (this._repeatItems ??= new RepeatItems(this.options$));
    }

    /**
     * Get Queues
     *
     * @remarks
     * Gets all queues in a project.
     */
    async all(
        projectName: string,
        options?: RequestOptions
    ): Promise<Array<components.QueueInput>> {
        return unwrapAsync(projectQueuesAll(this, projectName, options));
    }

    /**
     * Create Queue
     *
     * @remarks
     * Creates a new queue.
     */
    async create(
        projectName: string,
        queueInput: components.QueueInput,
        options?: RequestOptions
    ): Promise<components.CreateQueue> {
        return unwrapAsync(projectQueuesCreate(this, projectName, queueInput, options));
    }

    /**
     * Get Queue
     *
     * @remarks
     * Gets a queue in a project by ID.
     */
    async one(
        projectName: string,
        queueId: string,
        options?: RequestOptions
    ): Promise<components.QueueInput> {
        return unwrapAsync(projectQueuesOne(this, projectName, queueId, options));
    }

    /**
     * Delete Queue
     *
     * @remarks
     * Deletes a queue by ID.
     */
    async delete(projectName: string, queueId: string, options?: RequestOptions): Promise<void> {
        return unwrapAsync(projectQueuesDelete(this, projectName, queueId, options));
    }
}
