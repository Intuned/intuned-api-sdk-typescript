/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { encodeJSON as encodeJSON$, encodeSimple as encodeSimple$ } from "../lib/encodings.js";
import * as m$ from "../lib/matchers.js";
import * as schemas$ from "../lib/schemas.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import * as components from "../models/components/index.js";
import * as errors from "../models/errors/index.js";
import { SDKError } from "../models/errors/sdkerror.js";
import { SDKValidationError } from "../models/errors/sdkvalidationerror.js";
import * as operations from "../models/operations/index.js";
import { unwrap as unwrap$ } from "../types/fp.js";

export class Recorder extends ClientSDK {
    /**
     * Create Recorder Auth Session Instance
     *
     * @remarks
     * create a new auth session instance to be used later for recording
     */
    async createAuthSession(
        projectName: string,
        createRecorderAuthSessionRequest: components.CreateRecorderAuthSessionRequest,
        options?: RequestOptions
    ): Promise<components.CreateRecorderAuthSessionInstance> {
        const input$: operations.CreateRecorderAuthSessionInstanceRequest = {
            projectName: projectName,
            createRecorderAuthSessionRequest: createRecorderAuthSessionRequest,
        };

        const parsed$ = schemas$.safeParse(
            input$,
            (value$) =>
                operations.CreateRecorderAuthSessionInstanceRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const payload$ = unwrap$(parsed$);
        const body$ = encodeJSON$("body", payload$.CreateRecorderAuthSessionRequest, {
            explode: true,
        });

        const pathParams$ = {
            projectName: encodeSimple$("projectName", payload$.projectName, {
                explode: false,
                charEncoding: "percent",
            }),
            workspaceId: encodeSimple$("workspaceId", this.options$.workspaceId, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = pathToFunc(
            "/{workspaceId}/projects/{projectName}/auth-sessions/recorder/auth-session/create"
        )(pathParams$);

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
        });

        const apiKey$ = await extractSecurity(this.options$.apiKey);
        const security$ = apiKey$ == null ? {} : { apiKey: apiKey$ };
        const context = {
            operationID: "createRecorderAuthSessionInstance",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKey,
        };
        const securitySettings$ = resolveGlobalSecurity(security$);

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["400", "401", "404", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });
        const response = unwrap$(doResult);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await m$.match<
            components.CreateRecorderAuthSessionInstance,
            | errors.ApiErrorInvalidInput
            | errors.ApiErrorUnauthorized
            | SDKError
            | SDKValidationError
        >(
            m$.json(201, components.CreateRecorderAuthSessionInstance$inboundSchema),
            m$.jsonErr(400, errors.ApiErrorInvalidInput$inboundSchema),
            m$.jsonErr(401, errors.ApiErrorUnauthorized$inboundSchema),
            m$.fail([404, "4XX", "5XX"])
        )(response, { extraFields: responseFields$ });

        return unwrap$(result$);
    }

    /**
     * Create Recorder Auth Session Instance
     *
     * @remarks
     * create a recording session for a specific auth session
     */
    async start(
        projectName: string,
        startAuthSessionRecorderRequest: components.StartAuthSessionRecorderRequest,
        options?: RequestOptions
    ): Promise<components.StartAuthSessionRecorder> {
        const input$: operations.StartAuthSessionRecorderRequest = {
            projectName: projectName,
            startAuthSessionRecorderRequest: startAuthSessionRecorderRequest,
        };

        const parsed$ = schemas$.safeParse(
            input$,
            (value$) => operations.StartAuthSessionRecorderRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const payload$ = unwrap$(parsed$);
        const body$ = encodeJSON$("body", payload$.StartAuthSessionRecorderRequest, {
            explode: true,
        });

        const pathParams$ = {
            projectName: encodeSimple$("projectName", payload$.projectName, {
                explode: false,
                charEncoding: "percent",
            }),
            workspaceId: encodeSimple$("workspaceId", this.options$.workspaceId, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = pathToFunc(
            "/{workspaceId}/projects/{projectName}/auth-sessions/recorder/recorder-session/start"
        )(pathParams$);

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
        });

        const apiKey$ = await extractSecurity(this.options$.apiKey);
        const security$ = apiKey$ == null ? {} : { apiKey: apiKey$ };
        const context = {
            operationID: "startAuthSessionRecorder",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKey,
        };
        const securitySettings$ = resolveGlobalSecurity(security$);

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["400", "401", "404", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });
        const response = unwrap$(doResult);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await m$.match<
            components.StartAuthSessionRecorder,
            | errors.ApiErrorInvalidInput
            | errors.ApiErrorUnauthorized
            | SDKError
            | SDKValidationError
        >(
            m$.json(201, components.StartAuthSessionRecorder$inboundSchema),
            m$.jsonErr(400, errors.ApiErrorInvalidInput$inboundSchema),
            m$.jsonErr(401, errors.ApiErrorUnauthorized$inboundSchema),
            m$.fail([404, "4XX", "5XX"])
        )(response, { extraFields: responseFields$ });

        return unwrap$(result$);
    }
}
