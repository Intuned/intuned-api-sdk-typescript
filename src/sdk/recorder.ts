/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { projectAuthSessionsRecorderCreateAuthSession } from "../funcs/projectAuthSessionsRecorderCreateAuthSession.js";
import { projectAuthSessionsRecorderStart } from "../funcs/projectAuthSessionsRecorderStart.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Recorder extends ClientSDK {
    /**
     * Create Recorder Auth Session Instance
     *
     * @remarks
     * create a new auth session instance to be used later for recording
     */
    async createAuthSession(
        projectName: string,
        createRecorderAuthSessionRequest: components.CreateRecorderAuthSessionRequest,
        options?: RequestOptions
    ): Promise<components.CreateRecorderAuthSessionInstance> {
        return unwrapAsync(
            projectAuthSessionsRecorderCreateAuthSession(
                this,
                projectName,
                createRecorderAuthSessionRequest,
                options
            )
        );
    }

    /**
     * Start recorder session for an auth session
     *
     * @remarks
     * create a recording session for a specific auth session
     */
    async start(
        projectName: string,
        startAuthSessionRecorderRequest: components.StartAuthSessionRecorderRequest,
        options?: RequestOptions
    ): Promise<components.StartAuthSessionRecorder> {
        return unwrapAsync(
            projectAuthSessionsRecorderStart(
                this,
                projectName,
                startAuthSessionRecorderRequest,
                options
            )
        );
    }
}
