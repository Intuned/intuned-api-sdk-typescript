/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { encodeJSON as encodeJSON$, encodeSimple as encodeSimple$ } from "../lib/encodings.js";
import * as m$ from "../lib/matchers.js";
import * as schemas$ from "../lib/schemas.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import * as components from "../models/components/index.js";
import * as errors from "../models/errors/index.js";
import { SDKError } from "../models/errors/sdkerror.js";
import { SDKValidationError } from "../models/errors/sdkvalidationerror.js";
import * as operations from "../models/operations/index.js";
import { unwrap as unwrap$ } from "../types/fp.js";

export class ExtractMarkdown extends ClientSDK {
    /**
     * Extract Markdown - Sync
     *
     * @remarks
     * Extracts markdown from a file. Supported file types are image, pdf (more coming soon!).
     * It accepts the file.
     */
    async sync(
        file: components.FileT,
        options?: RequestOptions
    ): Promise<components.MarkdownExtractionSyncResponse> {
        const input$: components.GeneralExtractRequest = {
            file: file,
        };

        const parsed$ = schemas$.safeParse(
            input$,
            (value$) => components.GeneralExtractRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const payload$ = unwrap$(parsed$);
        const body$ = encodeJSON$("body", payload$, { explode: true });

        const pathParams$ = {
            workspaceId: encodeSimple$("workspaceId", this.options$.workspaceId, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = pathToFunc("/{workspaceId}/files/extract/markdown")(pathParams$);

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
        });

        const apiKey$ = await extractSecurity(this.options$.apiKey);
        const security$ = apiKey$ == null ? {} : { apiKey: apiKey$ };
        const context = {
            operationID: "fileExtractMarkdownSync",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKey,
        };
        const securitySettings$ = resolveGlobalSecurity(security$);

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["400", "401", "404", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });
        const response = unwrap$(doResult);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await m$.match<
            components.MarkdownExtractionSyncResponse,
            | errors.ApiErrorInvalidInput
            | errors.ApiErrorUnauthorized
            | SDKError
            | SDKValidationError
        >(
            m$.json(200, components.MarkdownExtractionSyncResponse$inboundSchema),
            m$.jsonErr(400, errors.ApiErrorInvalidInput$inboundSchema),
            m$.jsonErr(401, errors.ApiErrorUnauthorized$inboundSchema),
            m$.fail([404, "4XX", "5XX"])
        )(response, { extraFields: responseFields$ });

        return unwrap$(result$);
    }

    /**
     * Extract Markdown - Async Start
     *
     * @remarks
     * Starts an asynchronous operation to extract markdown from a file. Supported file types are image, pdf (more coming soon!).
     * This methods accepts the file.
     * The API responds with an ID to track the operation status and retrieve the result.
     */
    async start(
        file: components.FileT,
        options?: RequestOptions
    ): Promise<components.AsyncFilePendingResponse> {
        const input$: components.GeneralExtractRequest = {
            file: file,
        };

        const parsed$ = schemas$.safeParse(
            input$,
            (value$) => components.GeneralExtractRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const payload$ = unwrap$(parsed$);
        const body$ = encodeJSON$("body", payload$, { explode: true });

        const pathParams$ = {
            workspaceId: encodeSimple$("workspaceId", this.options$.workspaceId, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = pathToFunc("/{workspaceId}/files/extract/markdown/start")(pathParams$);

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
        });

        const apiKey$ = await extractSecurity(this.options$.apiKey);
        const security$ = apiKey$ == null ? {} : { apiKey: apiKey$ };
        const context = {
            operationID: "fileExtractMarkdownStart",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKey,
        };
        const securitySettings$ = resolveGlobalSecurity(security$);

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["400", "401", "404", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });
        const response = unwrap$(doResult);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await m$.match<
            components.AsyncFilePendingResponse,
            | errors.ApiErrorInvalidInput
            | errors.ApiErrorUnauthorized
            | SDKError
            | SDKValidationError
        >(
            m$.json(201, components.AsyncFilePendingResponse$inboundSchema),
            m$.jsonErr(400, errors.ApiErrorInvalidInput$inboundSchema),
            m$.jsonErr(401, errors.ApiErrorUnauthorized$inboundSchema),
            m$.fail([404, "4XX", "5XX"])
        )(response, { extraFields: responseFields$ });

        return unwrap$(result$);
    }

    /**
     * Extract Markdown - Async Result
     *
     * @remarks
     * Gets the result of the markdown extraction operation using the operation ID.
     */
    async result(
        operationId: string,
        options?: RequestOptions
    ): Promise<components.MarkdownExtractionAsyncResponse> {
        const input$: operations.FileExtractMarkdownResultRequest = {
            operationId: operationId,
        };

        const parsed$ = schemas$.safeParse(
            input$,
            (value$) => operations.FileExtractMarkdownResultRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const payload$ = unwrap$(parsed$);
        const body$ = null;

        const pathParams$ = {
            operationId: encodeSimple$("operationId", payload$.operationId, {
                explode: false,
                charEncoding: "percent",
            }),
            workspaceId: encodeSimple$("workspaceId", this.options$.workspaceId, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = pathToFunc("/{workspaceId}/files/extract/markdown/{operationId}/result")(
            pathParams$
        );

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const apiKey$ = await extractSecurity(this.options$.apiKey);
        const security$ = apiKey$ == null ? {} : { apiKey: apiKey$ };
        const context = {
            operationID: "fileExtractMarkdownResult",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKey,
        };
        const securitySettings$ = resolveGlobalSecurity(security$);

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["400", "401", "404", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });
        const response = unwrap$(doResult);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await m$.match<
            components.MarkdownExtractionAsyncResponse,
            | errors.ApiErrorInvalidInput
            | errors.ApiErrorUnauthorized
            | SDKError
            | SDKValidationError
        >(
            m$.json(200, components.MarkdownExtractionAsyncResponse$inboundSchema),
            m$.jsonErr(400, errors.ApiErrorInvalidInput$inboundSchema),
            m$.jsonErr(401, errors.ApiErrorUnauthorized$inboundSchema),
            m$.fail([404, "4XX", "5XX"])
        )(response, { extraFields: responseFields$ });

        return unwrap$(result$);
    }
}
